/*
 * EEPROM.c
 *
 *  Created on: 17 Jul 2023
 *      Author: Ahmed
 */
#include "EEPROM.h"

void eeprom_init(void){
	//I2C init
	//PB6: I2C1_SCL
	//PB7: I2C1_SDA

	I2C_config_t config;

	config.general_call_address_detection = I2C_GENERAL_CALL_ADDRESS_DETECTION_ENABLE;
	config.ack_control = I2C_ACK_CONTROL_ENABLE;
	config.clock_speed = I2C_SCLK_SM_100K;
	config.i2c_mode = I2C_MODE_I2C;
	config.p_slave_event_callback = NULL;
	config.stretch_mode = I2C_STRETCH_MODE_ENABLE;

	MCAL_I2C_set_pins(I2C1);
	MCAL_I2C_init(I2C1, config);

}

unsigned char eeprom_write_nBytes(unsigned int memory_adderss,unsigned char * data, uint8_t dataLen){

	//Because of how the EEPROM works we need to put the address in which it reads/write first
	uint8_t buffer[256], i;

	buffer[0] = (uint8_t)(memory_adderss >> 8); //Upper byte memory address
	buffer[1] = (uint8_t)(memory_adderss); //Lower byte memory address

	for (i = 2; i < (dataLen + 2); ++i) {
		buffer[i] = data[i - 2];
	}

	MCAL_I2C_master_TX(I2C1, EEPROM_SLAVE_ADDRESS, buffer, (dataLen + 2), with_stop, start);

	return 0;
}

unsigned char eeprom_write_nBytes(unsigned int memory_adderss,uint8_t * data, uint8_t dataLen){
	uint8_t buffer[2];

	buffer[0] = (uint8_t)(memory_adderss >> 8); //Upper byte memory address
	buffer[1] = (uint8_t)(memory_adderss); //Lower byte memory address

	MCAL_I2C_master_TX(I2C1, EEPROM_SLAVE_ADDRESS, buffer, 2, with_stop, start); //Write address only


}
