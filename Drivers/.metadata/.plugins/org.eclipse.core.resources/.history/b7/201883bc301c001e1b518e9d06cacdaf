/*
 * STM32F103C6_SPI_Driver.c
 *
 *  Created on: 6 Jul 2023
 *      Author: Ahmed
 */

/*
 * =======================================================================================
 * 									Includes
 * =======================================================================================
 */
#include "STM32F103C6_SPI_Driver.h"



/*
 * =======================================================================================
 * 							Generic Macros
 * =======================================================================================
 */
#define SPI1_INDEX			0
#define SPI2_INDEX			1
#define SPI_SR_TXE			((uint8_t)0x02)
#define SPI_SR_RXVE


/*
 * =======================================================================================
 * 							Generic Variables
 * =======================================================================================
 */

SPI_config_t* global_SPI_config[2] = {NULL, NUll};

/*
 *
 * =======================================================================================
 * 							APIs Implementations
 * =======================================================================================
 */
void MCAL_SPI_init(SPI_Typedef * SPIx,SPI_config_t * config){
	//temp variables for precaution
	uint16_t tempCR1 = 0, tempCR2 = 0;

	if(SPIx == SPI1){
		global_SPI_config[SPI1_INDEX] = config;
		RCC_SPI1_CLK_EN();
	}else if(SPIx == SPI2){
		global_SPI_config[SPI2_INDEX] = config;
		RCC_SPI2_CLK_EN();
	}

	//Enable SP1 CR1. bit 6 SPE: SPI enable
	tempCR1  = (uint16_t)(1<<6);

	//Master or Slave
	tempCR1 |= config->device_mode;

	//Communication mode
	tempCR1 |= config->communication_mode;

	//Frame format
	tempCR1 |= config->frame_format;

	//Data size
	tempCR1 |= config->data_size;

	//clock polarity
	tempCR1 |= config->CLK_polarity;

	//clock phase
	tempCR1 |= config->CLK_phase;

	//NSS
	if(config->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_ENABLE){
		tempCR2 |= config->NSS;
	}else if(config->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_DISABLE){
		tempCR2 &= config->NSS;
	}else{
		tempCR1 |= config->NSS;
	}

	//baud rate
	tempCR1 |= config->baud_rate_prescaler;

	//interrupt
	if(config->IRQ_enable != SPI_IRQ_ENABLE_NONE){
		tempCR2 |= config->IRQ_enable;

		if(SPIx == SPI1){
			NVIC_IRQ35_SPI1_ENABLE;
		}else if (SPIx == SPI2) {
			NVIC_IRQ36_SPI2_ENABLE;
		}


	}


	SPIx->SPI_CR1 = tempCR1;
	SPIx->SPI_CR2 = tempCR2;

}


void MCAL_SPI_deinit(SPI_Typedef * SPIx){

	if(SPIx == SPI1){
		NVIC_IRQ35_SPI1_DISABLE;
		RCC_SPI1_RESET();
	}else if (SPIx == SPI2) {
		NVIC_IRQ36_SPI2_DISABLE;
		RCC_SPI2_RESET();
	}
}

//GPIO related functions
void MCAL_SPI_set_pins(SPI_Typedef * SPIx);

void MCAL_SPI_send_date(SPI_Typedef * SPIx, uint16_t* data, pollingMechnism pollEn){

}
void MCAL_SPI_receive_date(SPI_Typedef * SPIx, uint16_t* data, pollingMechnism pollEn);

void MCAL_SPI_TX_RX(SPI_Typedef * SPIx, uint16_t* data, pollingMechnism pollEn);
