
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e7c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc4  08000fc4  00010fcc  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc4  08000fc4  00010fcc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc4  08000fcc  00010fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc4  08000fc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000000  08000fcc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08000fcc  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fcc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000525f  00000000  00000000  00010ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c6d  00000000  00000000  00016254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e00  00000000  00000000  00016ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000240  00000000  00000000  00017cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00017f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e81  00000000  00000000  000180e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002ec3  00000000  00000000  00018f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000aa14  00000000  00000000  0001be24  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00026838  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000744  00000000  00000000  000268b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f94 	.word	0x08000f94

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f94 	.word	0x08000f94

08000170 <EXTI0_IRQHandler>:
 * ===========================================================================================
 * 									ISR Functions
 * ===========================================================================================
 * */

void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {EXTI->PR |= (1 << 5); GP_IRQ_Callback[EXTI5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & (1 << 6)) {EXTI->PR |= (1 << 6); GP_IRQ_Callback[EXTI6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & (1 << 7)) {EXTI->PR |= (1 << 7); GP_IRQ_Callback[EXTI7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & (1 << 8)) {EXTI->PR |= (1 << 8); GP_IRQ_Callback[EXTI8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & (1 << 9)) {EXTI->PR |= (1 << 9); GP_IRQ_Callback[EXTI9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {EXTI->PR |= (1 << 10); GP_IRQ_Callback[EXTI10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & (1 << 11)) {EXTI->PR |= (1 << 11); GP_IRQ_Callback[EXTI11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & (1 << 12)) {EXTI->PR |= (1 << 12); GP_IRQ_Callback[EXTI12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & (1 << 13)) {EXTI->PR |= (1 << 13); GP_IRQ_Callback[EXTI13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & (1 << 14)) {EXTI->PR |= (1 << 14); GP_IRQ_Callback[EXTI14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & (1 << 15)) {EXTI->PR |= (1 << 15); GP_IRQ_Callback[EXTI15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <get_CRLH_position>:
* @param[in]	-PinNumber: which  pin number according @ref
* 				 GPIO PINS_define to get bit
* @retval		-Starting bit
* Note			-None
======================================================================================*/
uint8_t get_CRLH_position(uint16_t pinNumber){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber){
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <get_CRLH_position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <get_CRLH_position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <get_CRLH_position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <get_CRLH_position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <get_CRLH_position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <get_CRLH_position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <get_CRLH_position+0x7a>
 80003b8:	e047      	b.n	800044a <get_CRLH_position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <get_CRLH_position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <get_CRLH_position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <get_CRLH_position+0x8a>
 80003c6:	e040      	b.n	800044a <get_CRLH_position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <get_CRLH_position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <get_CRLH_position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <get_CRLH_position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <get_CRLH_position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <get_CRLH_position+0x9a>
 80003e6:	e030      	b.n	800044a <get_CRLH_position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <get_CRLH_position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <get_CRLH_position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <get_CRLH_position+0xaa>
 80003fa:	e026      	b.n	800044a <get_CRLH_position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <get_CRLH_position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <get_CRLH_position+0xb6>
 8000408:	e01f      	b.n	800044a <get_CRLH_position+0xba>
	case  GPIO_PIN_0:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_1:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_2:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_3:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_4:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_5:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_6:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_7:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_8:
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_9:
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_10:
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_11:
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_12:
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_13:
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_14:
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_15:
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <get_CRLH_position+0xbc>
		break;
	}


	return 1;
 800044a:	2301      	movs	r3, #1
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_init>:
*				 the configuration information for the specified GPIO PIN.
* @retval		-None
* Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,but LQFP48 Package
* 				 has only GPIO A,B,PART of C/D exported as external PINS from the M
======================================================================================*/
void MCAL_GPIO_init(GPIO_Typedef * GPIOX, GPIO_pinConfig_t * pinConfig){
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	volatile uint32_t * configReg = NULL;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t pinMode = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]

	configReg = (pinConfig->GPIO_pinNumber > GPIO_PIN_7) ? &GPIOX->CRH : &GPIOX->CRL;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2b80      	cmp	r3, #128	; 0x80
 800046e:	d902      	bls.n	8000476 <MCAL_GPIO_init+0x20>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3304      	adds	r3, #4
 8000474:	e000      	b.n	8000478 <MCAL_GPIO_init+0x22>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	60bb      	str	r3, [r7, #8]

	*configReg &= ~(0xf << get_CRLH_position(pinConfig->GPIO_pinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <get_CRLH_position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	if((pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_AF_OD) || (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_AF_PP) ||
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_init+0x62>
	   (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_OD) || (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_PP)){
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
	if((pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_AF_OD) || (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_AF_PP) ||
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_init+0x62>
	   (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_OD) || (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_PP)){
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d10e      	bne.n	80004d6 <MCAL_GPIO_init+0x80>

		pinMode = ((((pinConfig->GPIO_mode - 4) << 2) | (pinConfig->GPIO_output_speed)) & 0x0F);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e02c      	b.n	8000530 <MCAL_GPIO_init+0xda>


	}else{

		if((pinConfig->GPIO_mode == GPIO_MODE_INPUT_FLO) || (pinConfig->GPIO_mode == GPIO_MODE_ANALOG)){
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d003      	beq.n	80004e6 <MCAL_GPIO_init+0x90>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d107      	bne.n	80004f6 <MCAL_GPIO_init+0xa0>

			pinMode = (((pinConfig->GPIO_mode) << 2) & 0x0F);
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e01c      	b.n	8000530 <MCAL_GPIO_init+0xda>

		}else if (pinConfig->GPIO_mode == GPIO_MODE_AF_INPUT){
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d102      	bne.n	8000504 <MCAL_GPIO_init+0xae>

			pinMode = (((GPIO_MODE_INPUT_FLO) << 2) & 0x0F);
 80004fe:	2304      	movs	r3, #4
 8000500:	73fb      	strb	r3, [r7, #15]
 8000502:	e015      	b.n	8000530 <MCAL_GPIO_init+0xda>

		}else{

			pinMode = (((GPIO_MODE_INPUT_PU) << 2) & 0x0F);
 8000504:	2308      	movs	r3, #8
 8000506:	73fb      	strb	r3, [r7, #15]

			if(pinConfig->GPIO_mode == GPIO_MODE_INPUT_PU){
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d107      	bne.n	8000520 <MCAL_GPIO_init+0xca>
				GPIOX->ODR |= pinConfig->GPIO_pinNumber;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	e007      	b.n	8000530 <MCAL_GPIO_init+0xda>
			}else{
				GPIOX->ODR &= ~(pinConfig->GPIO_pinNumber);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	8812      	ldrh	r2, [r2, #0]
 8000528:	43d2      	mvns	r2, r2
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
			}

		}
	}

	*configReg |= (pinMode << get_CRLH_position(pinConfig->GPIO_pinNumber));
 8000530:	7bfc      	ldrb	r4, [r7, #15]
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff2a 	bl	8000390 <get_CRLH_position>
 800053c:	4603      	mov	r3, r0
 800053e:	fa04 f203 	lsl.w	r2, r4, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	431a      	orrs	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <MCAL_GPIO_writePin>:
* @param[in]	-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
* @param[in]	-value: Pin Value
* @retval		-None
* Note			-None
======================================================================================*/
void MCAL_GPIO_writePin(GPIO_Typedef * GPIOX, uint16_t  pinNumber, uint8_t  value){
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
 8000560:	4613      	mov	r3, r2
 8000562:	707b      	strb	r3, [r7, #1]

	if(value != GPIO_PIN_RESET){
 8000564:	787b      	ldrb	r3, [r7, #1]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d003      	beq.n	8000572 <MCAL_GPIO_writePin+0x1e>
		GPIOX->BSRR = (uint32_t) pinNumber;
 800056a:	887a      	ldrh	r2, [r7, #2]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	611a      	str	r2, [r3, #16]
	}else{
		GPIOX->BRR = (uint32_t) pinNumber;
	}

}
 8000570:	e002      	b.n	8000578 <MCAL_GPIO_writePin+0x24>
		GPIOX->BRR = (uint32_t) pinNumber;
 8000572:	887a      	ldrh	r2, [r7, #2]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	615a      	str	r2, [r3, #20]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
	...

08000584 <MCAL_RCC_getSYSCLKFreq>:
1111: SYSCLK divided by 512
*/
const uint8_t AHBPrescTable [16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};


uint32_t MCAL_RCC_getSYSCLKFreq(void){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	Set and cleared by hardware to indicate which clock source is used as system clock.
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/
	switch((RCC->CFGR >> 2) & 0b11){
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MCAL_RCC_getSYSCLKFreq+0x30>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	2b01      	cmp	r3, #1
 8000594:	d006      	beq.n	80005a4 <MCAL_RCC_getSYSCLKFreq+0x20>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d302      	bcc.n	80005a0 <MCAL_RCC_getSYSCLKFreq+0x1c>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d004      	beq.n	80005a8 <MCAL_RCC_getSYSCLKFreq+0x24>
 800059e:	e005      	b.n	80005ac <MCAL_RCC_getSYSCLKFreq+0x28>

	case 0:
		return HSI_RC_CLK;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MCAL_RCC_getSYSCLKFreq+0x34>)
 80005a2:	e003      	b.n	80005ac <MCAL_RCC_getSYSCLKFreq+0x28>

	case 1:
		//todo needed to be calculated user should specifiy it
		return HSE_CLK;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MCAL_RCC_getSYSCLKFreq+0x38>)
 80005a6:	e001      	b.n	80005ac <MCAL_RCC_getSYSCLKFreq+0x28>

	case 2:
		////todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <MCAL_RCC_getSYSCLKFreq+0x38>)
 80005aa:	e7ff      	b.n	80005ac <MCAL_RCC_getSYSCLKFreq+0x28>
	}
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	007a1200 	.word	0x007a1200
 80005bc:	00f42400 	.word	0x00f42400

080005c0 <MCAL_RCC_getHCLKFreq>:


uint32_t MCAL_RCC_getHCLKFreq(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_getSYSCLKFreq() >> AHBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 80005c4:	f7ff ffde 	bl	8000584 <MCAL_RCC_getSYSCLKFreq>
 80005c8:	4601      	mov	r1, r0
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MCAL_RCC_getHCLKFreq+0x20>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	f003 0307 	and.w	r3, r3, #7
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <MCAL_RCC_getHCLKFreq+0x24>)
 80005d6:	5cd3      	ldrb	r3, [r2, r3]
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005dc:	4618      	mov	r0, r3
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	08000fb4 	.word	0x08000fb4

080005e8 <MCAL_RCC_getPCLK1Freq>:

uint32_t MCAL_RCC_getPCLK1Freq(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_getHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 80005ec:	f7ff ffe8 	bl	80005c0 <MCAL_RCC_getHCLKFreq>
 80005f0:	4601      	mov	r1, r0
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MCAL_RCC_getPCLK1Freq+0x20>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	f003 0307 	and.w	r3, r3, #7
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <MCAL_RCC_getPCLK1Freq+0x24>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	08000fac 	.word	0x08000fac

08000610 <MCAL_RCC_getPCLK2Freq>:

uint32_t MCAL_RCC_getPCLK2Freq(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_getHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]);
 8000614:	f7ff ffd4 	bl	80005c0 <MCAL_RCC_getHCLKFreq>
 8000618:	4601      	mov	r1, r0
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MCAL_RCC_getPCLK2Freq+0x20>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	0adb      	lsrs	r3, r3, #11
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <MCAL_RCC_getPCLK2Freq+0x24>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	fa21 f303 	lsr.w	r3, r1, r3
}
 800062c:	4618      	mov	r0, r3
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	08000fac 	.word	0x08000fac

08000638 <MCAL_SPI_init>:
 *
 * =======================================================================================
 * 							APIs Implementations
 * =======================================================================================
 */
void MCAL_SPI_init(SPI_Typedef * SPIx,SPI_config_t * config){
 8000638:	b4b0      	push	{r4, r5, r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	//temp variables for precaution
	uint16_t tempCR1 = 0, tempCR2 = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	81fb      	strh	r3, [r7, #14]
 8000646:	2300      	movs	r3, #0
 8000648:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1){
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a48      	ldr	r2, [pc, #288]	; (8000770 <MCAL_SPI_init+0x138>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d110      	bne.n	8000674 <MCAL_SPI_init+0x3c>
		global_SPI_config[SPI1_INDEX] = *config;
 8000652:	4a48      	ldr	r2, [pc, #288]	; (8000774 <MCAL_SPI_init+0x13c>)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	4614      	mov	r4, r2
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000662:	e884 0003 	stmia.w	r4, {r0, r1}
		RCC_SPI1_CLK_EN();
 8000666:	4b44      	ldr	r3, [pc, #272]	; (8000778 <MCAL_SPI_init+0x140>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a43      	ldr	r2, [pc, #268]	; (8000778 <MCAL_SPI_init+0x140>)
 800066c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	e014      	b.n	800069e <MCAL_SPI_init+0x66>
	}else if(SPIx == SPI2){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a41      	ldr	r2, [pc, #260]	; (800077c <MCAL_SPI_init+0x144>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d110      	bne.n	800069e <MCAL_SPI_init+0x66>
		global_SPI_config[SPI2_INDEX] = *config;
 800067c:	4b3d      	ldr	r3, [pc, #244]	; (8000774 <MCAL_SPI_init+0x13c>)
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	f103 0418 	add.w	r4, r3, #24
 8000684:	4615      	mov	r5, r2
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800068e:	e884 0003 	stmia.w	r4, {r0, r1}
		RCC_SPI2_CLK_EN();
 8000692:	4b39      	ldr	r3, [pc, #228]	; (8000778 <MCAL_SPI_init+0x140>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a38      	ldr	r2, [pc, #224]	; (8000778 <MCAL_SPI_init+0x140>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069c:	61d3      	str	r3, [r2, #28]
	}

	//Enable SP1 CR1. bit 6 SPE: SPI enable
	tempCR1  = (uint16_t)(1<<6);
 800069e:	2340      	movs	r3, #64	; 0x40
 80006a0:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tempCR1 |= config->device_mode;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	881a      	ldrh	r2, [r3, #0]
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	81fb      	strh	r3, [r7, #14]

	//Communication mode
	tempCR1 |= config->communication_mode;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	885a      	ldrh	r2, [r3, #2]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	81fb      	strh	r3, [r7, #14]

	//Frame format
	tempCR1 |= config->frame_format;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	889a      	ldrh	r2, [r3, #4]
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	4313      	orrs	r3, r2
 80006be:	81fb      	strh	r3, [r7, #14]

	//Data size
	tempCR1 |= config->data_size;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	88da      	ldrh	r2, [r3, #6]
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	81fb      	strh	r3, [r7, #14]

	//clock polarity
	tempCR1 |= config->CLK_polarity;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	891a      	ldrh	r2, [r3, #8]
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	81fb      	strh	r3, [r7, #14]

	//clock phase
	tempCR1 |= config->CLK_phase;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	895a      	ldrh	r2, [r3, #10]
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	4313      	orrs	r3, r2
 80006dc:	81fb      	strh	r3, [r7, #14]

	//NSS
	if(config->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_ENABLE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	899b      	ldrh	r3, [r3, #12]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d105      	bne.n	80006f2 <MCAL_SPI_init+0xba>
		tempCR2 |= config->NSS;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	899a      	ldrh	r2, [r3, #12]
 80006ea:	89bb      	ldrh	r3, [r7, #12]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	81bb      	strh	r3, [r7, #12]
 80006f0:	e010      	b.n	8000714 <MCAL_SPI_init+0xdc>
	}else if(config->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_DISABLE){
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d105      	bne.n	800070a <MCAL_SPI_init+0xd2>
		tempCR2 &= config->NSS;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	899a      	ldrh	r2, [r3, #12]
 8000702:	89bb      	ldrh	r3, [r7, #12]
 8000704:	4013      	ands	r3, r2
 8000706:	81bb      	strh	r3, [r7, #12]
 8000708:	e004      	b.n	8000714 <MCAL_SPI_init+0xdc>
	}else{
		tempCR1 |= config->NSS;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	899a      	ldrh	r2, [r3, #12]
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	4313      	orrs	r3, r2
 8000712:	81fb      	strh	r3, [r7, #14]
	}

	//baud rate
	tempCR1 |= config->baud_rate_prescaler;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	89da      	ldrh	r2, [r3, #14]
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	4313      	orrs	r3, r2
 800071c:	81fb      	strh	r3, [r7, #14]

	//interrupt
	if(config->IRQ_enable != SPI_IRQ_ENABLE_NONE){
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	8a1b      	ldrh	r3, [r3, #16]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d019      	beq.n	800075a <MCAL_SPI_init+0x122>
		tempCR2 |= config->IRQ_enable;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	8a1a      	ldrh	r2, [r3, #16]
 800072a:	89bb      	ldrh	r3, [r7, #12]
 800072c:	4313      	orrs	r3, r2
 800072e:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MCAL_SPI_init+0x138>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d106      	bne.n	8000746 <MCAL_SPI_init+0x10e>
			NVIC_IRQ35_SPI1_ENABLE;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MCAL_SPI_init+0x148>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <MCAL_SPI_init+0x148>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e009      	b.n	800075a <MCAL_SPI_init+0x122>
		}else if (SPIx == SPI2) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <MCAL_SPI_init+0x144>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d105      	bne.n	800075a <MCAL_SPI_init+0x122>
			NVIC_IRQ36_SPI2_ENABLE;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MCAL_SPI_init+0x148>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <MCAL_SPI_init+0x148>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6013      	str	r3, [r2, #0]


	}


	SPIx->SPI_CR1 = tempCR1;
 800075a:	89fa      	ldrh	r2, [r7, #14]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tempCR2;
 8000760:	89ba      	ldrh	r2, [r7, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	605a      	str	r2, [r3, #4]

}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	bcb0      	pop	{r4, r5, r7}
 800076e:	4770      	bx	lr
 8000770:	40013000 	.word	0x40013000
 8000774:	20000058 	.word	0x20000058
 8000778:	40021000 	.word	0x40021000
 800077c:	40003800 	.word	0x40003800
 8000780:	e000e104 	.word	0xe000e104

08000784 <MCAL_SPI_set_pins>:
		NVIC_IRQ36_SPI2_DISABLE;
		RCC_SPI2_RESET();
	}
}

void MCAL_SPI_set_pins(SPI_Typedef * SPIx){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

	GPIO_pinConfig_t pinConfig;


	if (SPIx == SPI1) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a7f      	ldr	r2, [pc, #508]	; (800098c <MCAL_SPI_set_pins+0x208>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d175      	bne.n	8000880 <MCAL_SPI_set_pins+0xfc>
		//PA 4 : NSS
		//PA 5 : SCK
		//PA 6 : MISO
		//PA 7 : MOSI

		if(global_SPI_config[SPI1_INDEX].device_mode == SPI_DEVICE_MODE_MASTER){
 8000794:	4b7e      	ldr	r3, [pc, #504]	; (8000990 <MCAL_SPI_set_pins+0x20c>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	2b04      	cmp	r3, #4
 800079a:	d142      	bne.n	8000822 <MCAL_SPI_set_pins+0x9e>

			//PA 4 : NSS
			switch(global_SPI_config[SPI1_INDEX].NSS){
 800079c:	4b7c      	ldr	r3, [pc, #496]	; (8000990 <MCAL_SPI_set_pins+0x20c>)
 800079e:	899b      	ldrh	r3, [r3, #12]
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d00e      	beq.n	80007c2 <MCAL_SPI_set_pins+0x3e>
 80007a4:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d117      	bne.n	80007dc <MCAL_SPI_set_pins+0x58>
			case SPI_NSS_HW_MASTER_SS_OUTPUT_DISABLE:
				//Hardware Master - Input Floating
				pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 80007ac:	2301      	movs	r3, #1
 80007ae:	73bb      	strb	r3, [r7, #14]
				pinConfig.GPIO_pinNumber = GPIO_PIN_4;
 80007b0:	2310      	movs	r3, #16
 80007b2:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_init(GPIOA, &pinConfig);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	4876      	ldr	r0, [pc, #472]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 80007bc:	f7ff fe4b 	bl	8000456 <MCAL_GPIO_init>
				break;
 80007c0:	e00c      	b.n	80007dc <MCAL_SPI_set_pins+0x58>

			case SPI_NSS_HW_MASTER_SS_OUTPUT_ENABLE:
				//Hardware Master - NSS output enabled Alternative function push-pull
				pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 80007c2:	2306      	movs	r3, #6
 80007c4:	73bb      	strb	r3, [r7, #14]
				pinConfig.GPIO_pinNumber = GPIO_PIN_4;
 80007c6:	2310      	movs	r3, #16
 80007c8:	81bb      	strh	r3, [r7, #12]
				pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 80007ca:	2301      	movs	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_init(GPIOA, &pinConfig);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	486f      	ldr	r0, [pc, #444]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 80007d6:	f7ff fe3e 	bl	8000456 <MCAL_GPIO_init>
				break;
 80007da:	bf00      	nop

//===============================================================================

			/*PA 5 : SCK
			 *Master Alternative function push-pull*/
			pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 80007dc:	2306      	movs	r3, #6
 80007de:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_5;
 80007e0:	2320      	movs	r3, #32
 80007e2:	81bb      	strh	r3, [r7, #12]
			pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOA, &pinConfig);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4869      	ldr	r0, [pc, #420]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 80007f0:	f7ff fe31 	bl	8000456 <MCAL_GPIO_init>

//===============================================================================

			/*PA 6 : MISO 	(supports only full duplex)
			 *Master Input Floating*/
			pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 80007f4:	2301      	movs	r3, #1
 80007f6:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_6;
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_init(GPIOA, &pinConfig);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4619      	mov	r1, r3
 8000802:	4864      	ldr	r0, [pc, #400]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 8000804:	f7ff fe27 	bl	8000456 <MCAL_GPIO_init>

//===============================================================================

			/*PA 7 : MOSI
			 *Master Alternative function push-pull*/
			pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 8000808:	2306      	movs	r3, #6
 800080a:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_7;
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	81bb      	strh	r3, [r7, #12]
			pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 8000810:	2301      	movs	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOA, &pinConfig);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	485e      	ldr	r0, [pc, #376]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 800081c:	f7ff fe1b 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_pinNumber = GPIO_PIN_15;
			MCAL_GPIO_init(GPIOB, &pinConfig);

		}
	}
}
 8000820:	e0b0      	b.n	8000984 <MCAL_SPI_set_pins+0x200>
			if (global_SPI_config[SPI1_INDEX].device_mode == SPI_NSS_HW_SLAVE) {
 8000822:	4b5b      	ldr	r3, [pc, #364]	; (8000990 <MCAL_SPI_set_pins+0x20c>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d109      	bne.n	800083e <MCAL_SPI_set_pins+0xba>
				pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 800082a:	2301      	movs	r3, #1
 800082c:	73bb      	strb	r3, [r7, #14]
				pinConfig.GPIO_pinNumber = GPIO_PIN_4;
 800082e:	2310      	movs	r3, #16
 8000830:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_init(GPIOA, &pinConfig);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	4856      	ldr	r0, [pc, #344]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 800083a:	f7ff fe0c 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 800083e:	2301      	movs	r3, #1
 8000840:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_5;
 8000842:	2320      	movs	r3, #32
 8000844:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_init(GPIOA, &pinConfig);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	4851      	ldr	r0, [pc, #324]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 800084e:	f7ff fe02 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 8000852:	2306      	movs	r3, #6
 8000854:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_6;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	81bb      	strh	r3, [r7, #12]
			pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 800085a:	2301      	movs	r3, #1
 800085c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOA, &pinConfig);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	484b      	ldr	r0, [pc, #300]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 8000866:	f7ff fdf6 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 800086a:	2301      	movs	r3, #1
 800086c:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_7;
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_init(GPIOA, &pinConfig);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4846      	ldr	r0, [pc, #280]	; (8000994 <MCAL_SPI_set_pins+0x210>)
 800087a:	f7ff fdec 	bl	8000456 <MCAL_GPIO_init>
}
 800087e:	e081      	b.n	8000984 <MCAL_SPI_set_pins+0x200>
	} else if(SPIx == SPI2) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a45      	ldr	r2, [pc, #276]	; (8000998 <MCAL_SPI_set_pins+0x214>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d17d      	bne.n	8000984 <MCAL_SPI_set_pins+0x200>
		if(global_SPI_config[SPI2_INDEX].device_mode == SPI_DEVICE_MODE_MASTER){
 8000888:	4b41      	ldr	r3, [pc, #260]	; (8000990 <MCAL_SPI_set_pins+0x20c>)
 800088a:	8b1b      	ldrh	r3, [r3, #24]
 800088c:	2b04      	cmp	r3, #4
 800088e:	d147      	bne.n	8000920 <MCAL_SPI_set_pins+0x19c>
			switch(global_SPI_config[SPI1_INDEX].NSS){
 8000890:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <MCAL_SPI_set_pins+0x20c>)
 8000892:	899b      	ldrh	r3, [r3, #12]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d00f      	beq.n	80008b8 <MCAL_SPI_set_pins+0x134>
 8000898:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800089c:	4293      	cmp	r3, r2
 800089e:	d119      	bne.n	80008d4 <MCAL_SPI_set_pins+0x150>
				pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73bb      	strb	r3, [r7, #14]
				pinConfig.GPIO_pinNumber = GPIO_PIN_12;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_init(GPIOB, &pinConfig);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	483a      	ldr	r0, [pc, #232]	; (800099c <MCAL_SPI_set_pins+0x218>)
 80008b2:	f7ff fdd0 	bl	8000456 <MCAL_GPIO_init>
				break;
 80008b6:	e00d      	b.n	80008d4 <MCAL_SPI_set_pins+0x150>
				pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 80008b8:	2306      	movs	r3, #6
 80008ba:	73bb      	strb	r3, [r7, #14]
				pinConfig.GPIO_pinNumber = GPIO_PIN_12;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	81bb      	strh	r3, [r7, #12]
				pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_init(GPIOB, &pinConfig);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	4833      	ldr	r0, [pc, #204]	; (800099c <MCAL_SPI_set_pins+0x218>)
 80008ce:	f7ff fdc2 	bl	8000456 <MCAL_GPIO_init>
				break;
 80008d2:	bf00      	nop
			pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 80008d4:	2306      	movs	r3, #6
 80008d6:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_13;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	81bb      	strh	r3, [r7, #12]
			pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOB, &pinConfig);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	482c      	ldr	r0, [pc, #176]	; (800099c <MCAL_SPI_set_pins+0x218>)
 80008ea:	f7ff fdb4 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 80008ee:	2301      	movs	r3, #1
 80008f0:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_14;
 80008f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008f6:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_init(GPIOB, &pinConfig);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	4827      	ldr	r0, [pc, #156]	; (800099c <MCAL_SPI_set_pins+0x218>)
 8000900:	f7ff fda9 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 8000904:	2306      	movs	r3, #6
 8000906:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_15;
 8000908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800090c:	81bb      	strh	r3, [r7, #12]
			pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOB, &pinConfig);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	4820      	ldr	r0, [pc, #128]	; (800099c <MCAL_SPI_set_pins+0x218>)
 800091a:	f7ff fd9c 	bl	8000456 <MCAL_GPIO_init>
}
 800091e:	e031      	b.n	8000984 <MCAL_SPI_set_pins+0x200>
			if (global_SPI_config[SPI2_INDEX].device_mode == SPI_NSS_HW_SLAVE) {
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MCAL_SPI_set_pins+0x20c>)
 8000922:	8b1b      	ldrh	r3, [r3, #24]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10a      	bne.n	800093e <MCAL_SPI_set_pins+0x1ba>
				pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 8000928:	2301      	movs	r3, #1
 800092a:	73bb      	strb	r3, [r7, #14]
				pinConfig.GPIO_pinNumber = GPIO_PIN_12;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_init(GPIOB, &pinConfig);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	4818      	ldr	r0, [pc, #96]	; (800099c <MCAL_SPI_set_pins+0x218>)
 800093a:	f7ff fd8c 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 800093e:	2301      	movs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_13;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_init(GPIOB, &pinConfig);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <MCAL_SPI_set_pins+0x218>)
 8000950:	f7ff fd81 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 8000954:	2306      	movs	r3, #6
 8000956:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_14;
 8000958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800095c:	81bb      	strh	r3, [r7, #12]
			pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOB, &pinConfig);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MCAL_SPI_set_pins+0x218>)
 800096a:	f7ff fd74 	bl	8000456 <MCAL_GPIO_init>
			pinConfig.GPIO_mode = GPIO_MODE_INPUT_FLO;
 800096e:	2301      	movs	r3, #1
 8000970:	73bb      	strb	r3, [r7, #14]
			pinConfig.GPIO_pinNumber = GPIO_PIN_15;
 8000972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000976:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_init(GPIOB, &pinConfig);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4619      	mov	r1, r3
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <MCAL_SPI_set_pins+0x218>)
 8000980:	f7ff fd69 	bl	8000456 <MCAL_GPIO_init>
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013000 	.word	0x40013000
 8000990:	20000058 	.word	0x20000058
 8000994:	40010800 	.word	0x40010800
 8000998:	40003800 	.word	0x40003800
 800099c:	40010c00 	.word	0x40010c00

080009a0 <MCAL_SPI_send_date>:

void MCAL_SPI_send_date(SPI_Typedef * SPIx, uint16_t* data, pollingMechnism pollEn){
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	4613      	mov	r3, r2
 80009ac:	71fb      	strb	r3, [r7, #7]

	//Busy wait
	if (pollEn == pollingEnable) {
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d106      	bne.n	80009c2 <MCAL_SPI_send_date+0x22>
		while(!(SPIx->SPI_SR & SPI_SR_TXE));
 80009b4:	bf00      	nop
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0f9      	beq.n	80009b6 <MCAL_SPI_send_date+0x16>
	}

	//Send date
	SPIx->SPI_DR = *data;
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <MCAL_SPI_receive_date>:

void MCAL_SPI_receive_date(SPI_Typedef * SPIx, uint16_t* data, pollingMechnism pollEn){
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71fb      	strb	r3, [r7, #7]

	//Busy wait
	if (pollEn == pollingEnable) {
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d106      	bne.n	80009f8 <MCAL_SPI_receive_date+0x22>
		while(!(SPIx->SPI_SR & SPI_SR_RXNE));
 80009ea:	bf00      	nop
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <MCAL_SPI_receive_date+0x16>
	}

	//Receive data
	*data = SPIx->SPI_DR;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	801a      	strh	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <MCAL_SPI_TX_RX>:

void MCAL_SPI_TX_RX(SPI_Typedef * SPIx, uint16_t* data, pollingMechnism pollEn){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	4613      	mov	r3, r2
 8000a18:	71fb      	strb	r3, [r7, #7]
	MCAL_SPI_send_date(SPIx, data, pollEn);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f7ff ffbd 	bl	80009a0 <MCAL_SPI_send_date>
	MCAL_SPI_receive_date(SPIx, data, pollEn);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68b9      	ldr	r1, [r7, #8]
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f7ff ffd2 	bl	80009d6 <MCAL_SPI_receive_date>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <SPI1_IRQHandler>:



void SPI1_IRQHandler(void){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
	IRQ_SPI_src_t irq_src ;

	irq_src.TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <SPI1_IRQHandler+0x50>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	085b      	lsrs	r3, r3, #1
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	793b      	ldrb	r3, [r7, #4]
 8000a50:	f362 0300 	bfi	r3, r2, #0, #1
 8000a54:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <SPI1_IRQHandler+0x50>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	793b      	ldrb	r3, [r7, #4]
 8000a62:	f362 0341 	bfi	r3, r2, #1, #1
 8000a66:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <SPI1_IRQHandler+0x50>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	793b      	ldrb	r3, [r7, #4]
 8000a76:	f362 0382 	bfi	r3, r2, #2, #1
 8000a7a:	713b      	strb	r3, [r7, #4]

	global_SPI_config[SPI1_INDEX].p_IRQ_callback(irq_src);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SPI1_IRQHandler+0x54>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	7938      	ldrb	r0, [r7, #4]
 8000a82:	4798      	blx	r3
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40013000 	.word	0x40013000
 8000a90:	20000058 	.word	0x20000058

08000a94 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	IRQ_SPI_src_t irq_src ;

	irq_src.TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <SPI2_IRQHandler+0x50>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	085b      	lsrs	r3, r3, #1
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	793b      	ldrb	r3, [r7, #4]
 8000aa8:	f362 0300 	bfi	r3, r2, #0, #1
 8000aac:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <SPI2_IRQHandler+0x50>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	793b      	ldrb	r3, [r7, #4]
 8000aba:	f362 0341 	bfi	r3, r2, #1, #1
 8000abe:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SPI2_IRQHandler+0x50>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	793b      	ldrb	r3, [r7, #4]
 8000ace:	f362 0382 	bfi	r3, r2, #2, #1
 8000ad2:	713b      	strb	r3, [r7, #4]

	global_SPI_config[SPI2_INDEX].p_IRQ_callback(irq_src);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SPI2_IRQHandler+0x54>)
 8000ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad8:	7938      	ldrb	r0, [r7, #4]
 8000ada:	4798      	blx	r3
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40003800 	.word	0x40003800
 8000ae8:	20000058 	.word	0x20000058

08000aec <MCAL_USART_init>:
 * @param [in] 		-config: the configured structure that will be used
 * @retval 			-none
 * Note				-(Supported feature ASYNCH. Only)!
 *============================================================================
 */
void MCAL_USART_init(USART_Typedef * USARTX,USART_config_t * config){
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	Global_UART_Config = *config;
 8000af6:	4a59      	ldr	r2, [pc, #356]	; (8000c5c <MCAL_USART_init+0x170>)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	4614      	mov	r4, r2
 8000afc:	461d      	mov	r5, r3
 8000afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b02:	682b      	ldr	r3, [r5, #0]
 8000b04:	6023      	str	r3, [r4, #0]
	uint32_t pclk;

	//	enable Clock for the USART
	if(USART1 == USARTX){
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a55      	ldr	r2, [pc, #340]	; (8000c60 <MCAL_USART_init+0x174>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <MCAL_USART_init+0x30>
		RCC_USART1_CLK_EN();
 8000b0e:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <MCAL_USART_init+0x178>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <MCAL_USART_init+0x178>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	e014      	b.n	8000b46 <MCAL_USART_init+0x5a>
	}else if(USART2 == USARTX){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a52      	ldr	r2, [pc, #328]	; (8000c68 <MCAL_USART_init+0x17c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d106      	bne.n	8000b32 <MCAL_USART_init+0x46>
		RCC_USART2_CLK_EN();
 8000b24:	4b4f      	ldr	r3, [pc, #316]	; (8000c64 <MCAL_USART_init+0x178>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	4a4e      	ldr	r2, [pc, #312]	; (8000c64 <MCAL_USART_init+0x178>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2e:	61d3      	str	r3, [r2, #28]
 8000b30:	e009      	b.n	8000b46 <MCAL_USART_init+0x5a>
	}else if(USART3 == USARTX){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4d      	ldr	r2, [pc, #308]	; (8000c6c <MCAL_USART_init+0x180>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d105      	bne.n	8000b46 <MCAL_USART_init+0x5a>
		RCC_USART3_CLK_EN();
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MCAL_USART_init+0x178>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a49      	ldr	r2, [pc, #292]	; (8000c64 <MCAL_USART_init+0x178>)
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b44:	61d3      	str	r3, [r2, #28]
	}

	//Enable USART Module
	//USART_CR1  Bit 13 UE: USART enable
	USARTX->CR1 |= (1<<13);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60da      	str	r2, [r3, #12]

	//Enable USART TX and RX according to the USART_Mode configuration item
	//USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTX->CR1 |= config->USART_mode;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60da      	str	r2, [r3, #12]

	//Data length
	USARTX->CR1 |= config->data_lenght;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	7a12      	ldrb	r2, [r2, #8]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60da      	str	r2, [r3, #12]

	//Parity control
	USARTX->CR1 |= config->parity;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	7a52      	ldrb	r2, [r2, #9]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	60da      	str	r2, [r3, #12]

	//Stop bits
	USARTX->CR2 |= config->stop_bits;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	7a92      	ldrb	r2, [r2, #10]
 8000b84:	431a      	orrs	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]

	//Control flow
	USARTX->CR3 |= config->hwFlCt;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	7ad2      	ldrb	r2, [r2, #11]
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	615a      	str	r2, [r3, #20]

	if(USARTX == USART1){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <MCAL_USART_init+0x174>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d103      	bne.n	8000ba8 <MCAL_USART_init+0xbc>
		pclk = MCAL_RCC_getPCLK2Freq();
 8000ba0:	f7ff fd36 	bl	8000610 <MCAL_RCC_getPCLK2Freq>
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	e002      	b.n	8000bae <MCAL_USART_init+0xc2>
	}else{
		pclk = MCAL_RCC_getPCLK1Freq();
 8000ba8:	f7ff fd1e 	bl	80005e8 <MCAL_RCC_getPCLK1Freq>
 8000bac:	60f8      	str	r0, [r7, #12]
	}


	USARTX->BBR = UART_BRR_Register(pclk, config->baud_rate);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	011b      	lsls	r3, r3, #4
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	0119      	lsls	r1, r3, #4
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009a      	lsls	r2, r3, #2
 8000bc6:	441a      	add	r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bde:	2064      	movs	r0, #100	; 0x64
 8000be0:	fb00 f303 	mul.w	r3, r0, r3
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	011b      	lsls	r3, r3, #4
 8000be8:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <MCAL_USART_init+0x184>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	ea41 0203 	orr.w	r2, r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]


	if(config->IRQ_enable != USART_IRQ_ENABLE_NONE){
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	7b1b      	ldrb	r3, [r3, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d026      	beq.n	8000c52 <MCAL_USART_init+0x166>
		USARTX->CR1 |= config->IRQ_enable;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	7b12      	ldrb	r2, [r2, #12]
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60da      	str	r2, [r3, #12]

		if(USART1 == USARTX){
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MCAL_USART_init+0x174>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d106      	bne.n	8000c28 <MCAL_USART_init+0x13c>
			NVIC_IRQ37_USART1_ENABLE;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MCAL_USART_init+0x188>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <MCAL_USART_init+0x188>)
 8000c20:	f043 0320 	orr.w	r3, r3, #32
 8000c24:	6013      	str	r3, [r2, #0]
		}else if(USART3 == USARTX){
			NVIC_IRQ39_USART3_ENABLE;
		}
	}

}
 8000c26:	e014      	b.n	8000c52 <MCAL_USART_init+0x166>
		}else if(USART2 == USARTX){
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <MCAL_USART_init+0x17c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d106      	bne.n	8000c3e <MCAL_USART_init+0x152>
			NVIC_IRQ38_USART2_ENABLE;
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MCAL_USART_init+0x188>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <MCAL_USART_init+0x188>)
 8000c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	e009      	b.n	8000c52 <MCAL_USART_init+0x166>
		}else if(USART3 == USARTX){
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <MCAL_USART_init+0x180>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d105      	bne.n	8000c52 <MCAL_USART_init+0x166>
			NVIC_IRQ39_USART3_ENABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MCAL_USART_init+0x188>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <MCAL_USART_init+0x188>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000088 	.word	0x20000088
 8000c60:	40013800 	.word	0x40013800
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	40004800 	.word	0x40004800
 8000c70:	51eb851f 	.word	0x51eb851f
 8000c74:	e000e104 	.word	0xe000e104

08000c78 <MCAL_USART_set_pins>:
 * @param [in] 		-USARTX: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-(Supported feature ASYNCH. Only)!
 *============================================================================
 */
void MCAL_USART_set_pins(USART_Typedef * USARTX){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	GPIO_pinConfig_t  pinConfig;

	if(USART1 == USARTX){
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a2b      	ldr	r2, [pc, #172]	; (8000d30 <MCAL_USART_set_pins+0xb8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d118      	bne.n	8000cba <MCAL_USART_set_pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pinConfig.GPIO_pinNumber = GPIO_PIN_9;
 8000c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8c:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA, &pinConfig);
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4825      	ldr	r0, [pc, #148]	; (8000d34 <MCAL_USART_set_pins+0xbc>)
 8000c9e:	f7ff fbda 	bl	8000456 <MCAL_GPIO_init>

		//PA10 RX
		pinConfig.GPIO_pinNumber = GPIO_PIN_10;
 8000ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca6:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_AF_INPUT;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOA, &pinConfig);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4820      	ldr	r0, [pc, #128]	; (8000d34 <MCAL_USART_set_pins+0xbc>)
 8000cb4:	f7ff fbcf 	bl	8000456 <MCAL_GPIO_init>


	}


}
 8000cb8:	e036      	b.n	8000d28 <MCAL_USART_set_pins+0xb0>
	}else if(USART2 == USARTX){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <MCAL_USART_set_pins+0xc0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d116      	bne.n	8000cf0 <MCAL_USART_set_pins+0x78>
		pinConfig.GPIO_pinNumber = GPIO_PIN_2;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA, &pinConfig);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4817      	ldr	r0, [pc, #92]	; (8000d34 <MCAL_USART_set_pins+0xbc>)
 8000cd6:	f7ff fbbe 	bl	8000456 <MCAL_GPIO_init>
		pinConfig.GPIO_pinNumber = GPIO_PIN_3;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_AF_INPUT;
 8000cde:	2308      	movs	r3, #8
 8000ce0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOA, &pinConfig);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MCAL_USART_set_pins+0xbc>)
 8000cea:	f7ff fbb4 	bl	8000456 <MCAL_GPIO_init>
}
 8000cee:	e01b      	b.n	8000d28 <MCAL_USART_set_pins+0xb0>
	}else if(USART3 == USARTX){
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MCAL_USART_set_pins+0xc4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d117      	bne.n	8000d28 <MCAL_USART_set_pins+0xb0>
		pinConfig.GPIO_pinNumber = GPIO_PIN_10;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfc:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_PP;
 8000cfe:	2306      	movs	r3, #6
 8000d00:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &pinConfig);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <MCAL_USART_set_pins+0xc8>)
 8000d0e:	f7ff fba2 	bl	8000456 <MCAL_GPIO_init>
		pinConfig.GPIO_pinNumber = GPIO_PIN_11;
 8000d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d16:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_AF_INPUT;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOB, &pinConfig);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MCAL_USART_set_pins+0xc8>)
 8000d24:	f7ff fb97 	bl	8000456 <MCAL_GPIO_init>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40013800 	.word	0x40013800
 8000d34:	40010800 	.word	0x40010800
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	40010c00 	.word	0x40010c00

08000d44 <MCAL_USART_send_data>:
 * @param [in] 		-poll: enumeration that indicates whether using blocking or not
 * @retval 			-none
 * Note				-Parity if enabled takes space from data
 *============================================================================
 */
void MCAL_USART_send_data(USART_Typedef * USARTX, uint16_t* data, enum polling poll){
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	71fb      	strb	r3, [r7, #7]

	// wait until TXE flag is set in the SR
	if(poll == enable){
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d106      	bne.n	8000d66 <MCAL_USART_send_data+0x22>
		while(!(USARTX->SR & (1<<7)));
 8000d58:	bf00      	nop
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f9      	beq.n	8000d5a <MCAL_USART_send_data+0x16>

	//Checking the data length
	if(Global_UART_Config.data_lenght == USART_DATA_LENGHT_9B){
		USARTX->DR = (*data & (uint32_t)(0x1FF));
	}else{
		USARTX->DR = (*data & (uint8_t)(0xFF));
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	605a      	str	r2, [r3, #4]
	}


}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
	...

08000d7c <USART1_IRQHandler>:
	//Waiting until transmission is complete
	while(!(USARTX->SR & 1 << 6));
}

//ISR
void USART1_IRQHandler (void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	Global_UART_Config.p_IRQ_callback();
 8000d80:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <USART1_IRQHandler+0x10>)
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	4798      	blx	r3
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000088 	.word	0x20000088

08000d90 <USART2_IRQHandler>:

void USART2_IRQHandler (void){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	Global_UART_Config.p_IRQ_callback();
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <USART2_IRQHandler+0x10>)
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	4798      	blx	r3
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000088 	.word	0x20000088

08000da4 <USART3_IRQHandler>:

void USART3_IRQHandler (void){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	Global_UART_Config.p_IRQ_callback();
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <USART3_IRQHandler+0x10>)
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	4798      	blx	r3
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000088 	.word	0x20000088

08000db8 <main>:
void UART_init(void);
void SPI_init(void);
void SPI_irq_callback(IRQ_SPI_src_t irq_src);


int main(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

	//Initializing Peripherals
	clock_init();
 8000dbc:	f000 f806 	bl	8000dcc <clock_init>
	UART_init();
 8000dc0:	f000 f81e 	bl	8000e00 <UART_init>
	SPI_init();
 8000dc4:	f000 f840 	bl	8000e48 <SPI_init>
	while(1){
 8000dc8:	e7fe      	b.n	8000dc8 <main+0x10>
	...

08000dcc <clock_init>:

	}
}


void clock_init(void){
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	//Enabling GPIOs
	RCC_GPIOA_CLK_EN();
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <clock_init+0x30>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <clock_init+0x30>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <clock_init+0x30>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <clock_init+0x30>)
 8000de2:	f043 0308 	orr.w	r3, r3, #8
 8000de6:	6193      	str	r3, [r2, #24]

	//Enabling AFIO
	RCC_AFIO_CLK_EN();
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <clock_init+0x30>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <clock_init+0x30>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6193      	str	r3, [r2, #24]

}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000

08000e00 <UART_init>:

void UART_init(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
	USART_config_t config;

	config.baud_rate = USART_BAUD_RATE_115200;
 8000e06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e0a:	60bb      	str	r3, [r7, #8]
	config.hwFlCt = USART_HWFLCT_NONE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]

	config.IRQ_enable = USART_IRQ_ENABLE_RXNEIE;
 8000e10:	2320      	movs	r3, #32
 8000e12:	743b      	strb	r3, [r7, #16]

	config.p_IRQ_callback = UART_callback;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <UART_init+0x40>)
 8000e16:	617b      	str	r3, [r7, #20]

	config.parity = USART_PARITY_NONE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	737b      	strb	r3, [r7, #13]
	config.data_lenght = USART_DATA_LENGHT_8B;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	733b      	strb	r3, [r7, #12]
	config.stop_bits = USART_STOP_BITS_1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73bb      	strb	r3, [r7, #14]
	config.USART_mode = USART_MODE_TX_RX;
 8000e24:	230c      	movs	r3, #12
 8000e26:	713b      	strb	r3, [r7, #4]

	MCAL_USART_init(USART1, &config);
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <UART_init+0x44>)
 8000e2e:	f7ff fe5d 	bl	8000aec <MCAL_USART_init>
	MCAL_USART_set_pins(USART1);
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <UART_init+0x44>)
 8000e34:	f7ff ff20 	bl	8000c78 <MCAL_USART_set_pins>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	08000ea9 	.word	0x08000ea9
 8000e44:	40013800 	.word	0x40013800

08000e48 <SPI_init>:

void SPI_init(void){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
	SPI_config_t config;
	GPIO_pinConfig_t pinConfig;

	//Common configuration between master & slave
	config.CLK_phase = 	SPI_CLK_PHASE_EDGE2_DATA_CAPTURE;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	827b      	strh	r3, [r7, #18]
	config.CLK_polarity = SPI_CLK_POLARITY_IDLE_HIGH;
 8000e52:	2302      	movs	r3, #2
 8000e54:	823b      	strh	r3, [r7, #16]
	config.data_size = SPI_DATA_SIZE_8BIT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	81fb      	strh	r3, [r7, #14]
	config.frame_format = SPI_FRAME_FORMAT_MSB;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	81bb      	strh	r3, [r7, #12]
	//Assume by default pclk2 = 8MHZ
	config.baud_rate_prescaler = SPI_BAUD_RATE_PRESCALER_8;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	82fb      	strh	r3, [r7, #22]
	config.communication_mode = SPI_DIRECTION_2LINES;
 8000e62:	2300      	movs	r3, #0
 8000e64:	817b      	strh	r3, [r7, #10]
	MCAL_GPIO_init(GPIOA, &pinConfig);

#endif

#ifdef SPI_ACT_SLAVE
	config.device_mode = SPI_DEVICE_MODE_SLAVE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	813b      	strh	r3, [r7, #8]
	config.IRQ_enable = SPI_IRQ_ENABLE_RXNEIE;
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	833b      	strh	r3, [r7, #24]
	config.NSS = SPI_NSS_HW_SLAVE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	82bb      	strh	r3, [r7, #20]
	config.p_IRQ_callback = SPI_irq_callback;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <SPI_init+0x54>)
 8000e74:	61fb      	str	r3, [r7, #28]


#endif

	MCAL_SPI_init(SPI1, &config);
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <SPI_init+0x58>)
 8000e7e:	f7ff fbdb 	bl	8000638 <MCAL_SPI_init>
	MCAL_SPI_set_pins(SPI1);
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <SPI_init+0x58>)
 8000e84:	f7ff fc7e 	bl	8000784 <MCAL_SPI_set_pins>



	//Force the slave select high idle mode
	MCAL_GPIO_writePin(GPIOA, GPIO_PIN_4, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <SPI_init+0x5c>)
 8000e8e:	f7ff fb61 	bl	8000554 <MCAL_GPIO_writePin>

}
 8000e92:	bf00      	nop
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	08000eb5 	.word	0x08000eb5
 8000ea0:	40013000 	.word	0x40013000
 8000ea4:	40010800 	.word	0x40010800

08000ea8 <UART_callback>:

void UART_callback(void){
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	MCAL_GPIO_writePin(GPIOA, GPIO_PIN_4, 0);
	MCAL_SPI_TX_RX(SPI1, &flag, pollingEnable);
	MCAL_GPIO_writePin(GPIOA, GPIO_PIN_4, 1);
#endif

}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SPI_irq_callback>:

void SPI_irq_callback(IRQ_SPI_src_t irq_src){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	7138      	strb	r0, [r7, #4]
#ifdef SPI_ACT_SLAVE
	if(irq_src.RXNE){
 8000ebc:	793b      	ldrb	r3, [r7, #4]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00c      	beq.n	8000ee2 <SPI_irq_callback+0x2e>
		flag = 0xf;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <SPI_irq_callback+0x38>)
 8000eca:	220f      	movs	r2, #15
 8000ecc:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1, &flag, pollingDisable);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4906      	ldr	r1, [pc, #24]	; (8000eec <SPI_irq_callback+0x38>)
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <SPI_irq_callback+0x3c>)
 8000ed4:	f7ff fd9a 	bl	8000a0c <MCAL_SPI_TX_RX>
		MCAL_USART_send_data(USART1, &flag, enable);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4904      	ldr	r1, [pc, #16]	; (8000eec <SPI_irq_callback+0x38>)
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <SPI_irq_callback+0x40>)
 8000ede:	f7ff ff31 	bl	8000d44 <MCAL_USART_send_data>
	}
#endif
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000009c 	.word	0x2000009c
 8000ef0:	40013000 	.word	0x40013000
 8000ef4:	40013800 	.word	0x40013800

08000ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000efa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000efc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	; (8000f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <LoopForever+0xe>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	; (8000f44 <LoopForever+0x16>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f26:	f000 f811 	bl	8000f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f2a:	f7ff ff45 	bl	8000db8 <main>

08000f2e <LoopForever>:

LoopForever:
    b LoopForever
 8000f2e:	e7fe      	b.n	8000f2e <LoopForever>
  ldr   r0, =_estack
 8000f30:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f3c:	08000fcc 	.word	0x08000fcc
  ldr r2, =_sbss
 8000f40:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f44:	200000a0 	.word	0x200000a0

08000f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC1_2_IRQHandler>
	...

08000f4c <__libc_init_array>:
 8000f4c:	b570      	push	{r4, r5, r6, lr}
 8000f4e:	2500      	movs	r5, #0
 8000f50:	4e0c      	ldr	r6, [pc, #48]	; (8000f84 <__libc_init_array+0x38>)
 8000f52:	4c0d      	ldr	r4, [pc, #52]	; (8000f88 <__libc_init_array+0x3c>)
 8000f54:	1ba4      	subs	r4, r4, r6
 8000f56:	10a4      	asrs	r4, r4, #2
 8000f58:	42a5      	cmp	r5, r4
 8000f5a:	d109      	bne.n	8000f70 <__libc_init_array+0x24>
 8000f5c:	f000 f81a 	bl	8000f94 <_init>
 8000f60:	2500      	movs	r5, #0
 8000f62:	4e0a      	ldr	r6, [pc, #40]	; (8000f8c <__libc_init_array+0x40>)
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <__libc_init_array+0x44>)
 8000f66:	1ba4      	subs	r4, r4, r6
 8000f68:	10a4      	asrs	r4, r4, #2
 8000f6a:	42a5      	cmp	r5, r4
 8000f6c:	d105      	bne.n	8000f7a <__libc_init_array+0x2e>
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f74:	4798      	blx	r3
 8000f76:	3501      	adds	r5, #1
 8000f78:	e7ee      	b.n	8000f58 <__libc_init_array+0xc>
 8000f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f7e:	4798      	blx	r3
 8000f80:	3501      	adds	r5, #1
 8000f82:	e7f2      	b.n	8000f6a <__libc_init_array+0x1e>
 8000f84:	08000fc4 	.word	0x08000fc4
 8000f88:	08000fc4 	.word	0x08000fc4
 8000f8c:	08000fc4 	.word	0x08000fc4
 8000f90:	08000fc8 	.word	0x08000fc8

08000f94 <_init>:
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	bf00      	nop
 8000f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9a:	bc08      	pop	{r3}
 8000f9c:	469e      	mov	lr, r3
 8000f9e:	4770      	bx	lr

08000fa0 <_fini>:
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa2:	bf00      	nop
 8000fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa6:	bc08      	pop	{r3}
 8000fa8:	469e      	mov	lr, r3
 8000faa:	4770      	bx	lr
