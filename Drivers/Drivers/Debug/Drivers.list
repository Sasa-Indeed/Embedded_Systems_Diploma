
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001074  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c4  080011c4  000111cc  2**0
                  CONTENTS
  4 .ARM          00000000  080011c4  080011c4  000111cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c4  080011cc  000111cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c8  080011c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000000  080011cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080011cc  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071f8  00000000  00000000  000111f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010fd  00000000  00000000  000183ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000147e  00000000  00000000  000194ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000310  00000000  00000000  0001a968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  0001ac78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002fee  00000000  00000000  0001af00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003f6a  00000000  00000000  0001deee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c666  00000000  00000000  00021e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002e4be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a50  00000000  00000000  0002e53c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800118c 	.word	0x0800118c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800118c 	.word	0x0800118c

08000170 <eeprom_init>:
 *  Created on: 17 Jul 2023
 *      Author: Ahmed
 */
#include "EEPROM.h"

void eeprom_init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//PB6: I2C1_SCL
	//PB7: I2C1_SDA

	I2C_config_t config;

	config.general_call_address_detection = I2C_GENERAL_CALL_ADDRESS_DETECTION_ENABLE;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	config.ack_control = I2C_ACK_CONTROL_ENABLE;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	config.clock_speed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	config.i2c_mode = I2C_MODE_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	config.p_slave_event_callback = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	config.stretch_mode = I2C_STRETCH_MODE_ENABLE;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_set_pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_init+0x3c>)
 8000192:	f000 fb83 	bl	800089c <MCAL_I2C_set_pins>
	MCAL_I2C_init(I2C1, &config);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 fa74 	bl	8000688 <MCAL_I2C_init>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_nBytes>:

unsigned char eeprom_write_nBytes(unsigned int memory_adderss,unsigned char * data, uint8_t dataLen){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]

	//Because of how the EEPROM works we need to put the address in which it reads/write first
	uint8_t buffer[256], i;

	buffer[0] = (uint8_t)(memory_adderss >> 8); //Upper byte memory address
 80001c6:	f107 030c 	add.w	r3, r7, #12
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	0a1b      	lsrs	r3, r3, #8
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(memory_adderss); //Lower byte memory address
 80001d6:	f107 030c 	add.w	r3, r7, #12
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	705a      	strb	r2, [r3, #1]

	for (i = 2; i < (dataLen + 2); ++i) {
 80001e4:	2302      	movs	r3, #2
 80001e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001ea:	e011      	b.n	8000210 <eeprom_write_nBytes+0x60>
		buffer[i] = data[i - 2];
 80001ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f0:	3b02      	subs	r3, #2
 80001f2:	f107 0208 	add.w	r2, r7, #8
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	441a      	add	r2, r3
 80001fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001fe:	7811      	ldrb	r1, [r2, #0]
 8000200:	f107 0214 	add.w	r2, r7, #20
 8000204:	54d1      	strb	r1, [r2, r3]
	for (i = 2; i < (dataLen + 2); ++i) {
 8000206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800020a:	3301      	adds	r3, #1
 800020c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000210:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000214:	1dfb      	adds	r3, r7, #7
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	3302      	adds	r3, #2
 800021a:	429a      	cmp	r2, r3
 800021c:	dbe6      	blt.n	80001ec <eeprom_write_nBytes+0x3c>
	}

	MCAL_I2C_master_TX(I2C1, EEPROM_SLAVE_ADDRESS, buffer, (dataLen + 2), with_stop, start);
 800021e:	1dfb      	adds	r3, r7, #7
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	3302      	adds	r3, #2
 8000224:	4619      	mov	r1, r3
 8000226:	f107 0214 	add.w	r2, r7, #20
 800022a:	2300      	movs	r3, #0
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2300      	movs	r3, #0
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	460b      	mov	r3, r1
 8000234:	212a      	movs	r1, #42	; 0x2a
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <eeprom_write_nBytes+0x98>)
 8000238:	f000 fb74 	bl	8000924 <MCAL_I2C_master_TX>

	return 0;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40005400 	.word	0x40005400

0800024c <eeprom_read_nBytes>:

unsigned char eeprom_read_nBytes(unsigned int memory_adderss,uint8_t * data, uint8_t dataLen){
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af02      	add	r7, sp, #8
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	4613      	mov	r3, r2
 8000258:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];

	buffer[0] = (uint8_t)(memory_adderss >> 8); //Upper byte memory address
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	0a1b      	lsrs	r3, r3, #8
 800025e:	b2db      	uxtb	r3, r3
 8000260:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(memory_adderss); //Lower byte memory address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_master_TX(I2C1, EEPROM_SLAVE_ADDRESS, buffer, 2, without_stop, start); //Write address only
 8000268:	f107 0214 	add.w	r2, r7, #20
 800026c:	2300      	movs	r3, #0
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	2301      	movs	r3, #1
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2302      	movs	r3, #2
 8000276:	212a      	movs	r1, #42	; 0x2a
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <eeprom_read_nBytes+0x54>)
 800027a:	f000 fb53 	bl	8000924 <MCAL_I2C_master_TX>
	MCAL_I2C_master_RX(I2C1, EEPROM_SLAVE_ADDRESS, data, dataLen, with_stop, repeat_start); // Read data
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2301      	movs	r3, #1
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2300      	movs	r3, #0
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	4613      	mov	r3, r2
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	212a      	movs	r1, #42	; 0x2a
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <eeprom_read_nBytes+0x54>)
 8000290:	f000 fb9e 	bl	80009d0 <MCAL_I2C_master_RX>

	return 0;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40005400 	.word	0x40005400

080002a4 <EXTI0_IRQHandler>:
 * ===========================================================================================
 * 									ISR Functions
 * ===========================================================================================
 * */

void EXTI0_IRQHandler(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 0);
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI0]();
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <EXTI0_IRQHandler+0x20>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4798      	blx	r3
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010400 	.word	0x40010400
 80002c4:	20000064 	.word	0x20000064

080002c8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 1);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI1]();
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <EXTI1_IRQHandler+0x20>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4798      	blx	r3
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010400 	.word	0x40010400
 80002e8:	20000064 	.word	0x20000064

080002ec <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 2);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI2]();
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI2_IRQHandler+0x20>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4798      	blx	r3
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400
 800030c:	20000064 	.word	0x20000064

08000310 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 3);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI3_IRQHandler+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <EXTI3_IRQHandler+0x1c>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI3]();
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI3_IRQHandler+0x20>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	20000064 	.word	0x20000064

08000334 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	/*Clear pending request by writing '1' in the
	 * Pending register (EXTI_PR)*/
	EXTI->PR |= (1 << 4);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback
	GP_IRQ_Callback[EXTI4]();
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI4_IRQHandler+0x20>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	4798      	blx	r3
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010400 	.word	0x40010400
 8000354:	20000064 	.word	0x20000064

08000358 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {EXTI->PR |= (1 << 5); GP_IRQ_Callback[EXTI5]();}
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI9_5_IRQHandler+0x22>
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a22      	ldr	r2, [pc, #136]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6153      	str	r3, [r2, #20]
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4798      	blx	r3
	if (EXTI->PR & (1 << 6)) {EXTI->PR |= (1 << 6); GP_IRQ_Callback[EXTI6]();}
 800037a:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI9_5_IRQHandler+0x40>
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a1b      	ldr	r2, [pc, #108]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4798      	blx	r3
	if (EXTI->PR & (1 << 7)) {EXTI->PR |= (1 << 7); GP_IRQ_Callback[EXTI7]();}
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <EXTI9_5_IRQHandler+0x5e>
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ae:	6153      	str	r3, [r2, #20]
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4798      	blx	r3
	if (EXTI->PR & (1 << 8)) {EXTI->PR |= (1 << 8); GP_IRQ_Callback[EXTI8]();}
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d008      	beq.n	80003d4 <EXTI9_5_IRQHandler+0x7c>
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003d0:	6a1b      	ldr	r3, [r3, #32]
 80003d2:	4798      	blx	r3
	if (EXTI->PR & (1 << 9)) {EXTI->PR |= (1 << 9); GP_IRQ_Callback[EXTI9]();}
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <EXTI9_5_IRQHandler+0x9a>
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ea:	6153      	str	r3, [r2, #20]
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4798      	blx	r3
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010400 	.word	0x40010400
 80003fc:	20000064 	.word	0x20000064

08000400 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {EXTI->PR |= (1 << 10); GP_IRQ_Callback[EXTI10]();}
 8000404:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI15_10_IRQHandler+0x22>
 8000410:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a29      	ldr	r2, [pc, #164]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6153      	str	r3, [r2, #20]
 800041c:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800041e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000420:	4798      	blx	r3
	if (EXTI->PR & (1 << 11)) {EXTI->PR |= (1 << 11); GP_IRQ_Callback[EXTI11]();}
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800042a:	2b00      	cmp	r3, #0
 800042c:	d008      	beq.n	8000440 <EXTI15_10_IRQHandler+0x40>
 800042e:	4b23      	ldr	r3, [pc, #140]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a22      	ldr	r2, [pc, #136]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	4798      	blx	r3
	if (EXTI->PR & (1 << 12)) {EXTI->PR |= (1 << 12); GP_IRQ_Callback[EXTI12]();}
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000448:	2b00      	cmp	r3, #0
 800044a:	d008      	beq.n	800045e <EXTI15_10_IRQHandler+0x5e>
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000456:	6153      	str	r3, [r2, #20]
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4798      	blx	r3
	if (EXTI->PR & (1 << 13)) {EXTI->PR |= (1 << 13); GP_IRQ_Callback[EXTI13]();}
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d008      	beq.n	800047c <EXTI15_10_IRQHandler+0x7c>
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a13      	ldr	r2, [pc, #76]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 8000478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047a:	4798      	blx	r3
	if (EXTI->PR & (1 << 14)) {EXTI->PR |= (1 << 14); GP_IRQ_Callback[EXTI14]();}
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d008      	beq.n	800049a <EXTI15_10_IRQHandler+0x9a>
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800048e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000492:	6153      	str	r3, [r2, #20]
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 8000496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000498:	4798      	blx	r3
	if (EXTI->PR & (1 << 15)) {EXTI->PR |= (1 << 15); GP_IRQ_Callback[EXTI15]();}
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d008      	beq.n	80004b8 <EXTI15_10_IRQHandler+0xb8>
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 80004b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004b6:	4798      	blx	r3

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010400 	.word	0x40010400
 80004c0:	20000064 	.word	0x20000064

080004c4 <get_CRLH_position>:
* @param[in]	-PinNumber: which  pin number according @ref
* 				 GPIO PINS_define to get bit
* @retval		-Starting bit
* Note			-None
======================================================================================*/
uint8_t get_CRLH_position(uint16_t pinNumber){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber){
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	2b80      	cmp	r3, #128	; 0x80
 80004d2:	d042      	beq.n	800055a <get_CRLH_position+0x96>
 80004d4:	2b80      	cmp	r3, #128	; 0x80
 80004d6:	dc11      	bgt.n	80004fc <get_CRLH_position+0x38>
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d036      	beq.n	800054a <get_CRLH_position+0x86>
 80004dc:	2b08      	cmp	r3, #8
 80004de:	dc06      	bgt.n	80004ee <get_CRLH_position+0x2a>
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d02e      	beq.n	8000542 <get_CRLH_position+0x7e>
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d02e      	beq.n	8000546 <get_CRLH_position+0x82>
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d028      	beq.n	800053e <get_CRLH_position+0x7a>
 80004ec:	e047      	b.n	800057e <get_CRLH_position+0xba>
 80004ee:	2b20      	cmp	r3, #32
 80004f0:	d02f      	beq.n	8000552 <get_CRLH_position+0x8e>
 80004f2:	2b40      	cmp	r3, #64	; 0x40
 80004f4:	d02f      	beq.n	8000556 <get_CRLH_position+0x92>
 80004f6:	2b10      	cmp	r3, #16
 80004f8:	d029      	beq.n	800054e <get_CRLH_position+0x8a>
 80004fa:	e040      	b.n	800057e <get_CRLH_position+0xba>
 80004fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000500:	d033      	beq.n	800056a <get_CRLH_position+0xa6>
 8000502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000506:	dc09      	bgt.n	800051c <get_CRLH_position+0x58>
 8000508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800050c:	d029      	beq.n	8000562 <get_CRLH_position+0x9e>
 800050e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000512:	d028      	beq.n	8000566 <get_CRLH_position+0xa2>
 8000514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000518:	d021      	beq.n	800055e <get_CRLH_position+0x9a>
 800051a:	e030      	b.n	800057e <get_CRLH_position+0xba>
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000520:	d027      	beq.n	8000572 <get_CRLH_position+0xae>
 8000522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000526:	dc03      	bgt.n	8000530 <get_CRLH_position+0x6c>
 8000528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800052c:	d01f      	beq.n	800056e <get_CRLH_position+0xaa>
 800052e:	e026      	b.n	800057e <get_CRLH_position+0xba>
 8000530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000534:	d01f      	beq.n	8000576 <get_CRLH_position+0xb2>
 8000536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800053a:	d01e      	beq.n	800057a <get_CRLH_position+0xb6>
 800053c:	e01f      	b.n	800057e <get_CRLH_position+0xba>
	case  GPIO_PIN_0:
		return 0;
 800053e:	2300      	movs	r3, #0
 8000540:	e01e      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_1:
		return 4;
 8000542:	2304      	movs	r3, #4
 8000544:	e01c      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_2:
		return 8;
 8000546:	2308      	movs	r3, #8
 8000548:	e01a      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_3:
		return 12;
 800054a:	230c      	movs	r3, #12
 800054c:	e018      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_4:
		return 16;
 800054e:	2310      	movs	r3, #16
 8000550:	e016      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_5:
		return 20;
 8000552:	2314      	movs	r3, #20
 8000554:	e014      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_6:
		return 24;
 8000556:	2318      	movs	r3, #24
 8000558:	e012      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_7:
		return 28;
 800055a:	231c      	movs	r3, #28
 800055c:	e010      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_8:
		return 0;
 800055e:	2300      	movs	r3, #0
 8000560:	e00e      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_9:
		return 4;
 8000562:	2304      	movs	r3, #4
 8000564:	e00c      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_10:
		return 8;
 8000566:	2308      	movs	r3, #8
 8000568:	e00a      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_11:
		return 12;
 800056a:	230c      	movs	r3, #12
 800056c:	e008      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_12:
		return 16;
 800056e:	2310      	movs	r3, #16
 8000570:	e006      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_13:
		return 20;
 8000572:	2314      	movs	r3, #20
 8000574:	e004      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_14:
		return 24;
 8000576:	2318      	movs	r3, #24
 8000578:	e002      	b.n	8000580 <get_CRLH_position+0xbc>
		break;

	case  GPIO_PIN_15:
		return 28;
 800057a:	231c      	movs	r3, #28
 800057c:	e000      	b.n	8000580 <get_CRLH_position+0xbc>
		break;
	}


	return 1;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <MCAL_GPIO_init>:
*				 the configuration information for the specified GPIO PIN.
* @retval		-None
* Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,but LQFP48 Package
* 				 has only GPIO A,B,PART of C/D exported as external PINS from the M
======================================================================================*/
void MCAL_GPIO_init(GPIO_Typedef * GPIOX, GPIO_pinConfig_t * pinConfig){
 800058a:	b590      	push	{r4, r7, lr}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
	volatile uint32_t * configReg = NULL;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
	uint8_t pinMode = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]

	configReg = (pinConfig->GPIO_pinNumber > GPIO_PIN_7) ? &GPIOX->CRH : &GPIOX->CRL;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	2b80      	cmp	r3, #128	; 0x80
 80005a2:	d902      	bls.n	80005aa <MCAL_GPIO_init+0x20>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3304      	adds	r3, #4
 80005a8:	e000      	b.n	80005ac <MCAL_GPIO_init+0x22>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60bb      	str	r3, [r7, #8]

	*configReg &= ~(0xf << get_CRLH_position(pinConfig->GPIO_pinNumber));
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff86 	bl	80004c4 <get_CRLH_position>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	230f      	movs	r3, #15
 80005be:	4093      	lsls	r3, r2
 80005c0:	43da      	mvns	r2, r3
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	401a      	ands	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	601a      	str	r2, [r3, #0]

	if((pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_AF_OD) || (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_AF_PP) ||
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	d00b      	beq.n	80005ec <MCAL_GPIO_init+0x62>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	789b      	ldrb	r3, [r3, #2]
 80005d8:	2b06      	cmp	r3, #6
 80005da:	d007      	beq.n	80005ec <MCAL_GPIO_init+0x62>
	   (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_OD) || (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_PP)){
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	789b      	ldrb	r3, [r3, #2]
	if((pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_AF_OD) || (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_AF_PP) ||
 80005e0:	2b05      	cmp	r3, #5
 80005e2:	d003      	beq.n	80005ec <MCAL_GPIO_init+0x62>
	   (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_OD) || (pinConfig->GPIO_mode == GPIO_MODE_OUTPUT_PP)){
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d10e      	bne.n	800060a <MCAL_GPIO_init+0x80>

		pinMode = ((((pinConfig->GPIO_mode - 4) << 2) | (pinConfig->GPIO_output_speed)) & 0x0F);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	3b04      	subs	r3, #4
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	b25a      	sxtb	r2, r3
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	78db      	ldrb	r3, [r3, #3]
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e02c      	b.n	8000664 <MCAL_GPIO_init+0xda>


	}else{

		if((pinConfig->GPIO_mode == GPIO_MODE_INPUT_FLO) || (pinConfig->GPIO_mode == GPIO_MODE_ANALOG)){
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	789b      	ldrb	r3, [r3, #2]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d003      	beq.n	800061a <MCAL_GPIO_init+0x90>
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d107      	bne.n	800062a <MCAL_GPIO_init+0xa0>

			pinMode = (((pinConfig->GPIO_mode) << 2) & 0x0F);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	73fb      	strb	r3, [r7, #15]
 8000628:	e01c      	b.n	8000664 <MCAL_GPIO_init+0xda>

		}else if (pinConfig->GPIO_mode == GPIO_MODE_AF_INPUT){
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	789b      	ldrb	r3, [r3, #2]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d102      	bne.n	8000638 <MCAL_GPIO_init+0xae>

			pinMode = (((GPIO_MODE_INPUT_FLO) << 2) & 0x0F);
 8000632:	2304      	movs	r3, #4
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e015      	b.n	8000664 <MCAL_GPIO_init+0xda>

		}else{

			pinMode = (((GPIO_MODE_INPUT_PU) << 2) & 0x0F);
 8000638:	2308      	movs	r3, #8
 800063a:	73fb      	strb	r3, [r7, #15]

			if(pinConfig->GPIO_mode == GPIO_MODE_INPUT_PU){
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d107      	bne.n	8000654 <MCAL_GPIO_init+0xca>
				GPIOX->ODR |= pinConfig->GPIO_pinNumber;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	8812      	ldrh	r2, [r2, #0]
 800064c:	431a      	orrs	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	e007      	b.n	8000664 <MCAL_GPIO_init+0xda>
			}else{
				GPIOX->ODR &= ~(pinConfig->GPIO_pinNumber);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	8812      	ldrh	r2, [r2, #0]
 800065c:	43d2      	mvns	r2, r2
 800065e:	401a      	ands	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60da      	str	r2, [r3, #12]
			}

		}
	}

	*configReg |= (pinMode << get_CRLH_position(pinConfig->GPIO_pinNumber));
 8000664:	7bfc      	ldrb	r4, [r7, #15]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff2a 	bl	80004c4 <get_CRLH_position>
 8000670:	4603      	mov	r3, r0
 8000672:	fa04 f203 	lsl.w	r2, r4, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	431a      	orrs	r2, r3
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bd90      	pop	{r4, r7, pc}

08000688 <MCAL_I2C_init>:
 * 							APIs Implementations
 * =======================================================================================
 */

//Initializations APIs
void MCAL_I2C_init(I2C_Typedef * I2Cx,I2C_config_t * config){
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	uint16_t tempReg = 0, freqRange = 0, result = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	82fb      	strh	r3, [r7, #22]
 8000696:	2300      	movs	r3, #0
 8000698:	82bb      	strh	r3, [r7, #20]
 800069a:	2300      	movs	r3, #0
 800069c:	827b      	strh	r3, [r7, #18]
	uint32_t pclk1 = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
	//Enable RCC clock
	if(I2Cx == I2C1){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a76      	ldr	r2, [pc, #472]	; (8000880 <MCAL_I2C_init+0x1f8>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d110      	bne.n	80006cc <MCAL_I2C_init+0x44>
		global_I2C_config[I2C1_INDEX] = * config;
 80006aa:	4a76      	ldr	r2, [pc, #472]	; (8000884 <MCAL_I2C_init+0x1fc>)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	4614      	mov	r4, r2
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ba:	682b      	ldr	r3, [r5, #0]
 80006bc:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80006be:	4b72      	ldr	r3, [pc, #456]	; (8000888 <MCAL_I2C_init+0x200>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a71      	ldr	r2, [pc, #452]	; (8000888 <MCAL_I2C_init+0x200>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	e010      	b.n	80006ee <MCAL_I2C_init+0x66>
	}else{
		global_I2C_config[I2C2_INDEX] = * config;
 80006cc:	4b6d      	ldr	r3, [pc, #436]	; (8000884 <MCAL_I2C_init+0x1fc>)
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80006d4:	4615      	mov	r5, r2
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	682b      	ldr	r3, [r5, #0]
 80006e0:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 80006e2:	4b69      	ldr	r3, [pc, #420]	; (8000888 <MCAL_I2C_init+0x200>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a68      	ldr	r2, [pc, #416]	; (8000888 <MCAL_I2C_init+0x200>)
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ec:	61d3      	str	r3, [r2, #28]
	}

	if(config->i2c_mode == I2C_MODE_I2C){
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f040 8081 	bne.w	80007fa <MCAL_I2C_init+0x172>
		//1-
		/*---------------------------------INIT Timing---------------------------------*/
		//Get the I2Cx CR2 value
		tempReg = I2Cx->I2C_CR2;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	82fb      	strh	r3, [r7, #22]
		//Clear frequency FREQ[5:0] bits
		tempReg &= ~(I2C_CR2_FREQ);
 80006fe:	8afb      	ldrh	r3, [r7, #22]
 8000700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000704:	82fb      	strh	r3, [r7, #22]
		//Get pclk1 frequency value
		pclk1 = MCAL_RCC_getPCLK1Freq();
 8000706:	f000 fc15 	bl	8000f34 <MCAL_RCC_getPCLK1Freq>
 800070a:	60f8      	str	r0, [r7, #12]
		//Set frequency bits depending on pclk1 value
		freqRange = (uint16_t)(pclk1 / 1000000);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4a5f      	ldr	r2, [pc, #380]	; (800088c <MCAL_I2C_init+0x204>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	0c9b      	lsrs	r3, r3, #18
 8000716:	82bb      	strh	r3, [r7, #20]

		tempReg |= freqRange;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8abb      	ldrh	r3, [r7, #20]
 800071c:	4313      	orrs	r3, r2
 800071e:	82fb      	strh	r3, [r7, #22]
		//Write to I2Cx CR2
		I2Cx->I2C_CR2 = tempReg;
 8000720:	8afa      	ldrh	r2, [r7, #22]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	605a      	str	r2, [r3, #4]
		//Configure the clock control registers (I2C_CRR)

		//Disable the selected I2C peripheral to configure time
		I2Cx->I2C_CR1 &= ~(I2C_CR1_PE);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f023 0201 	bic.w	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]

		tempReg = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	82fb      	strh	r3, [r7, #22]

		//Configure speed in standard mode
		if ((config->clock_speed == I2C_SCLK_SM_50K) || (config->clock_speed == I2C_SCLK_SM_100K)) {
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800073e:	4293      	cmp	r3, r2
 8000740:	d004      	beq.n	800074c <MCAL_I2C_init+0xc4>
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a52      	ldr	r2, [pc, #328]	; (8000890 <MCAL_I2C_init+0x208>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d112      	bne.n	8000772 <MCAL_I2C_init+0xea>

			/*Standard mode speed calculation
			 * Tclk = CRR * Tpclk1
			 * CRR = Tclk / (2 * Tpclk1)
			 * CRR = Fpclk1 / (2 * I2C_ClockFrequency) */
			result = (uint16_t)(pclk1 / (config->clock_speed << 1));
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	fbb2 f3f3 	udiv	r3, r2, r3
 8000758:	827b      	strh	r3, [r7, #18]

			tempReg |= result;
 800075a:	8afa      	ldrh	r2, [r7, #22]
 800075c:	8a7b      	ldrh	r3, [r7, #18]
 800075e:	4313      	orrs	r3, r2
 8000760:	82fb      	strh	r3, [r7, #22]

			//Write to I2C_CRR
			I2Cx->I2C_CCR = result;
 8000762:	8a7a      	ldrh	r2, [r7, #18]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	61da      	str	r2, [r3, #28]

			//I2C_TRISE Configuration
			I2Cx->I2C_TRISE = freqRange + 1;
 8000768:	8abb      	ldrh	r3, [r7, #20]
 800076a:	3301      	adds	r3, #1
 800076c:	461a      	mov	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------------I2Cx CR1 Configuration---------------------------------*/

		//Get the I2Cx CR1 value
		tempReg = I2Cx->I2C_CR1;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	82fb      	strh	r3, [r7, #22]

		tempReg |= (uint16_t)(config->ack_control | config->general_call_address_detection
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	b29a      	uxth	r2, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	b29b      	uxth	r3, r3
 8000784:	4313      	orrs	r3, r2
 8000786:	b29a      	uxth	r2, r3
				| config->i2c_mode | config->stretch_mode);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	b29b      	uxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b29a      	uxth	r2, r3
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
		tempReg |= (uint16_t)(config->ack_control | config->general_call_address_detection
 8000796:	b29b      	uxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
 800079c:	8afb      	ldrh	r3, [r7, #22]
 800079e:	4313      	orrs	r3, r2
 80007a0:	82fb      	strh	r3, [r7, #22]

		//Write to I2Cx CR1
		I2Cx->I2C_CR1 = tempReg;
 80007a2:	8afa      	ldrh	r2, [r7, #22]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	601a      	str	r2, [r3, #0]

		/*---------------------------------I2Cx OAR1 & OAR2 Configuration---------------------------------*/
		tempReg = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	82fb      	strh	r3, [r7, #22]

		if (config->slave_address.enable_dual_address == 1) {
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	899b      	ldrh	r3, [r3, #12]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d10f      	bne.n	80007d4 <MCAL_I2C_init+0x14c>
			tempReg |= I2C_OAR2_ENDUAL;
 80007b4:	8afb      	ldrh	r3, [r7, #22]
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	82fb      	strh	r3, [r7, #22]
			tempReg |= config->slave_address.secondary_slave_address << I2C_OAR2_ADD2_Pos;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	8adb      	ldrh	r3, [r3, #22]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	82fb      	strh	r3, [r7, #22]
			I2Cx->I2C_OAR2 = tempReg;
 80007ce:	8afa      	ldrh	r2, [r7, #22]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60da      	str	r2, [r3, #12]
		}

		tempReg = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	82fb      	strh	r3, [r7, #22]
		tempReg |= config->slave_address.primary_slave_address << 1;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	8a9b      	ldrh	r3, [r3, #20]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	b21a      	sxth	r2, r3
 80007e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	82fb      	strh	r3, [r7, #22]
		tempReg |= config->slave_address.addressing_slave_mode;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	8afb      	ldrh	r3, [r7, #22]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	82fb      	strh	r3, [r7, #22]
		I2Cx->I2C_OAR1;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689b      	ldr	r3, [r3, #8]
	}else{
		//SMBUS MODE not supported yet!!!!
	}


	if(config->p_slave_event_callback != NULL){
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d034      	beq.n	800086c <MCAL_I2C_init+0x1e4>
		//Enable IRQ
		I2Cx->I2C_CR2 |= (I2C_CR2_ITERREN);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2 |= (I2C_CR2_ITBUFEN);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2 |= (I2C_CR2_ITEVTEN);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	605a      	str	r2, [r3, #4]

		if (I2Cx == I2C1) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MCAL_I2C_init+0x1f8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d10c      	bne.n	8000848 <MCAL_I2C_init+0x1c0>
			NVIC_IRQ31_I2C1_EV_ENABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MCAL_I2C_init+0x20c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <MCAL_I2C_init+0x20c>)
 8000834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000838:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_ENABLE;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MCAL_I2C_init+0x210>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <MCAL_I2C_init+0x210>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	e00b      	b.n	8000860 <MCAL_I2C_init+0x1d8>
		} else {
			NVIC_IRQ33_I2C2_EV_ENABLE;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MCAL_I2C_init+0x210>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MCAL_I2C_init+0x210>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_ENABLE;
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MCAL_I2C_init+0x210>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <MCAL_I2C_init+0x210>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6013      	str	r3, [r2, #0]
		}

		I2Cx->I2C_SR1 = 0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
		I2Cx->I2C_SR2 = 0;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
	}

	//Enable I2C peripheral
	I2Cx->I2C_CR1 |= I2C_CR1_PE;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f043 0201 	orr.w	r2, r3, #1
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bdb0      	pop	{r4, r5, r7, pc}
 8000880:	40005400 	.word	0x40005400
 8000884:	2000001c 	.word	0x2000001c
 8000888:	40021000 	.word	0x40021000
 800088c:	431bde83 	.word	0x431bde83
 8000890:	000186a0 	.word	0x000186a0
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000e104 	.word	0xe000e104

0800089c <MCAL_I2C_set_pins>:
		RCC_I2C2_RESET();
	}
}

//GPIO related functions
void MCAL_I2C_set_pins(I2C_Typedef * I2Cx){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	GPIO_pinConfig_t pinConfig;

	if (I2Cx == I2C1) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a1d      	ldr	r2, [pc, #116]	; (800091c <MCAL_I2C_set_pins+0x80>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d118      	bne.n	80008de <MCAL_I2C_set_pins+0x42>
		// PB 6 : I2C1_SCL
		// PB 7 : I2C1_SDA

		pinConfig.GPIO_pinNumber = GPIO_PIN_6;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_OD;
 80008b0:	2307      	movs	r3, #7
 80008b2:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &pinConfig);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4818      	ldr	r0, [pc, #96]	; (8000920 <MCAL_I2C_set_pins+0x84>)
 80008c0:	f7ff fe63 	bl	800058a <MCAL_GPIO_init>

		pinConfig.GPIO_pinNumber = GPIO_PIN_7;
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_OD;
 80008c8:	2307      	movs	r3, #7
 80008ca:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &pinConfig);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <MCAL_I2C_set_pins+0x84>)
 80008d8:	f7ff fe57 	bl	800058a <MCAL_GPIO_init>
		pinConfig.GPIO_pinNumber = GPIO_PIN_11;
		pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_OD;
		pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
		MCAL_GPIO_init(GPIOB, &pinConfig);
	}
}
 80008dc:	e019      	b.n	8000912 <MCAL_I2C_set_pins+0x76>
		pinConfig.GPIO_pinNumber = GPIO_PIN_10;
 80008de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e2:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_OD;
 80008e4:	2307      	movs	r3, #7
 80008e6:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &pinConfig);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <MCAL_I2C_set_pins+0x84>)
 80008f4:	f7ff fe49 	bl	800058a <MCAL_GPIO_init>
		pinConfig.GPIO_pinNumber = GPIO_PIN_11;
 80008f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008fc:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_mode = GPIO_MODE_OUTPUT_AF_OD;
 80008fe:	2307      	movs	r3, #7
 8000900:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &pinConfig);
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4619      	mov	r1, r3
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MCAL_I2C_set_pins+0x84>)
 800090e:	f7ff fe3c 	bl	800058a <MCAL_GPIO_init>
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40005400 	.word	0x40005400
 8000920:	40010c00 	.word	0x40010c00

08000924 <MCAL_I2C_master_TX>:

//Transmission functions
void MCAL_I2C_master_TX(I2C_Typedef * I2Cx, uint16_t devAddr,uint8_t* data,uint32_t dataLen,
		stop_condition stopCon, repeated_start sta){
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	460b      	mov	r3, r1
 8000932:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
	//todo
	//Support timeout (configure timer working for specific amount of time before letting go)
	//1.Set the start bit in the I2C_CR1 register to generate a start condition
	generate_start(I2Cx, enable, sta);
 8000938:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800093c:	461a      	mov	r2, r3
 800093e:	2101      	movs	r1, #1
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f000 f8b9 	bl	8000ab8 <generate_start>

	//2.Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with address
	while(!get_flag_status(I2Cx, EV5));
 8000946:	bf00      	nop
 8000948:	2101      	movs	r1, #1
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f000 f8dc 	bl	8000b08 <get_flag_status>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0f8      	beq.n	8000948 <MCAL_I2C_master_TX+0x24>

	//3.Send address
	send_address(I2Cx, devAddr, transmitter);
 8000956:	897b      	ldrh	r3, [r7, #10]
 8000958:	2200      	movs	r2, #0
 800095a:	4619      	mov	r1, r3
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f000 f94f 	bl	8000c00 <send_address>

	//4.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while(!get_flag_status(I2Cx, EV6));
 8000962:	bf00      	nop
 8000964:	2102      	movs	r1, #2
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f000 f8ce 	bl	8000b08 <get_flag_status>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f8      	beq.n	8000964 <MCAL_I2C_master_TX+0x40>

	//5.Check TRA, BUSY, MSL, TXE flags
	while(!get_flag_status(I2Cx, master_byte_transmitting));
 8000972:	bf00      	nop
 8000974:	4915      	ldr	r1, [pc, #84]	; (80009cc <MCAL_I2C_master_TX+0xa8>)
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 f8c6 	bl	8000b08 <get_flag_status>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f8      	beq.n	8000974 <MCAL_I2C_master_TX+0x50>

	for (i = 0; i < dataLen; ++i) {
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	e011      	b.n	80009ac <MCAL_I2C_master_TX+0x88>
		//Write in the DR register the data to be sent
		I2Cx->I2C_DR = data[i];
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	611a      	str	r2, [r3, #16]
		//6.Wait for EV8
		while(!get_flag_status(I2Cx, EV8));
 8000996:	bf00      	nop
 8000998:	2103      	movs	r1, #3
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f000 f8b4 	bl	8000b08 <get_flag_status>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f8      	beq.n	8000998 <MCAL_I2C_master_TX+0x74>
	for (i = 0; i < dataLen; ++i) {
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3301      	adds	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8e9      	bhi.n	8000988 <MCAL_I2C_master_TX+0x64>
	}

	if(stopCon == with_stop){
 80009b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d103      	bne.n	80009c4 <MCAL_I2C_master_TX+0xa0>
		//7.Send stop condition
		generate_stop(I2Cx, enable);
 80009bc:	2101      	movs	r1, #1
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f000 f954 	bl	8000c6c <generate_stop>
	}
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	00070080 	.word	0x00070080

080009d0 <MCAL_I2C_master_RX>:




void MCAL_I2C_master_RX(I2C_Typedef * I2Cx, uint16_t devAddr,uint8_t* data,uint32_t dataLen,
		stop_condition stopCon, repeated_start sta){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	460b      	mov	r3, r1
 80009de:	817b      	strh	r3, [r7, #10]
	uint32_t i = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <MCAL_I2C_master_RX+0xe0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	74fb      	strb	r3, [r7, #19]

	//1.Set the start bit in the I2C_CR1 register to generate a start condition
	generate_start(I2Cx, enable, sta);
 80009f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f8:	461a      	mov	r2, r3
 80009fa:	2101      	movs	r1, #1
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 f85b 	bl	8000ab8 <generate_start>

	//2.Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with address
	while(!get_flag_status(I2Cx, EV5));
 8000a02:	bf00      	nop
 8000a04:	2101      	movs	r1, #1
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f000 f87e 	bl	8000b08 <get_flag_status>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0f8      	beq.n	8000a04 <MCAL_I2C_master_RX+0x34>

	//3.Send address
	send_address(I2Cx, devAddr, receiver);
 8000a12:	897b      	ldrh	r3, [r7, #10]
 8000a14:	2201      	movs	r2, #1
 8000a16:	4619      	mov	r1, r3
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f000 f8f1 	bl	8000c00 <send_address>

	//4.Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while(!get_flag_status(I2Cx, EV6));
 8000a1e:	bf00      	nop
 8000a20:	2102      	movs	r1, #2
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f870 	bl	8000b08 <get_flag_status>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f8      	beq.n	8000a20 <MCAL_I2C_master_RX+0x50>

	acknowledge_config(I2Cx, enable);
 8000a2e:	2101      	movs	r1, #1
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f000 fa31 	bl	8000e98 <acknowledge_config>

	//5.Receive data
	if(dataLen){
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d01c      	beq.n	8000a76 <MCAL_I2C_master_RX+0xa6>
		//Reading data
		for (i = dataLen ; i >= 1; --i) {
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e012      	b.n	8000a68 <MCAL_I2C_master_RX+0x98>
			//Wait until RXNE becomes 1
			while(!get_flag_status(I2Cx, EV7));
 8000a42:	bf00      	nop
 8000a44:	2105      	movs	r1, #5
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f000 f85e 	bl	8000b08 <get_flag_status>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f8      	beq.n	8000a44 <MCAL_I2C_master_RX+0x74>

			*data = I2Cx->I2C_DR;//Read the data
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	701a      	strb	r2, [r3, #0]

			data++;//Go to the next address
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
		for (i = dataLen ; i >= 1; --i) {
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1e9      	bne.n	8000a42 <MCAL_I2C_master_RX+0x72>
		}

		acknowledge_config(I2Cx, disable);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f000 fa11 	bl	8000e98 <acknowledge_config>

	}

	if(stopCon == with_stop){
 8000a76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d103      	bne.n	8000a86 <MCAL_I2C_master_RX+0xb6>
		//7.Send stop condition
		generate_stop(I2Cx, enable);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f000 f8f3 	bl	8000c6c <generate_stop>
	}

	if(global_I2C_config[index].ack_control == I2C_ACK_CONTROL_ENABLE){
 8000a86:	7cfa      	ldrb	r2, [r7, #19]
 8000a88:	490a      	ldr	r1, [pc, #40]	; (8000ab4 <MCAL_I2C_master_RX+0xe4>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	440b      	add	r3, r1
 8000a94:	3318      	adds	r3, #24
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a9c:	d103      	bne.n	8000aa6 <MCAL_I2C_master_RX+0xd6>
		acknowledge_config(I2Cx, enable);
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f000 f9f9 	bl	8000e98 <acknowledge_config>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	2000001c 	.word	0x2000001c

08000ab8 <generate_start>:

void generate_start(I2C_Typedef * I2Cx, functional_state newState, repeated_start sta){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	70bb      	strb	r3, [r7, #2]

	if(sta != repeat_start){
 8000ac8:	78bb      	ldrb	r3, [r7, #2]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d007      	beq.n	8000ade <generate_start+0x26>
		//Check if bus is idle
		while(get_flag_status(I2Cx, busy_flag));
 8000ace:	bf00      	nop
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f818 	bl	8000b08 <get_flag_status>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f8      	bne.n	8000ad0 <generate_start+0x18>
	}


	if (newState != disable) {
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d006      	beq.n	8000af2 <generate_start+0x3a>
		//Generate a start condition
		I2Cx->I2C_CR1 |= I2C_CR1_START;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	601a      	str	r2, [r3, #0]
	} else {
		//Disable the start condition
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START);
	}
}
 8000af0:	e005      	b.n	8000afe <generate_start+0x46>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <get_flag_status>:

flag_status get_flag_status(I2C_Typedef * I2Cx, status flag){
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	flag_status bitStat = reset;
 8000b12:	2300      	movs	r3, #0
 8000b14:	75fb      	strb	r3, [r7, #23]
	uint32_t flag1 = 0, flag2 = 0, lastEvent = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]

	switch (flag) {
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d806      	bhi.n	8000b36 <get_flag_status+0x2e>
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d249      	bcs.n	8000bc0 <get_flag_status+0xb8>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d014      	beq.n	8000b5a <get_flag_status+0x52>
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d81e      	bhi.n	8000b72 <get_flag_status+0x6a>
 8000b34:	e005      	b.n	8000b42 <get_flag_status+0x3a>
 8000b36:	2b05      	cmp	r3, #5
 8000b38:	d04e      	beq.n	8000bd8 <get_flag_status+0xd0>
 8000b3a:	4a30      	ldr	r2, [pc, #192]	; (8000bfc <get_flag_status+0xf4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d024      	beq.n	8000b8a <get_flag_status+0x82>

		break;
	}

	default:
		break;
 8000b40:	e056      	b.n	8000bf0 <get_flag_status+0xe8>
		if ((I2Cx->I2C_SR2) & (I2C_SR2_BUSY)) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <get_flag_status+0x4c>
			bitStat = set;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
		break;
 8000b52:	e04d      	b.n	8000bf0 <get_flag_status+0xe8>
			bitStat = reset;
 8000b54:	2300      	movs	r3, #0
 8000b56:	75fb      	strb	r3, [r7, #23]
		break;
 8000b58:	e04a      	b.n	8000bf0 <get_flag_status+0xe8>
		if ((I2Cx->I2C_SR1) & (I2C_SR1_SB)) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <get_flag_status+0x64>
			bitStat = set;
 8000b66:	2301      	movs	r3, #1
 8000b68:	75fb      	strb	r3, [r7, #23]
		break;
 8000b6a:	e041      	b.n	8000bf0 <get_flag_status+0xe8>
			bitStat = reset;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
		break;
 8000b70:	e03e      	b.n	8000bf0 <get_flag_status+0xe8>
		if ((I2Cx->I2C_SR1) & (I2C_SR1_ADDR)) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <get_flag_status+0x7c>
			bitStat = set;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]
		break;
 8000b82:	e035      	b.n	8000bf0 <get_flag_status+0xe8>
			bitStat = reset;
 8000b84:	2300      	movs	r3, #0
 8000b86:	75fb      	strb	r3, [r7, #23]
		break;
 8000b88:	e032      	b.n	8000bf0 <get_flag_status+0xe8>
		flag1 = I2Cx->I2C_SR1;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->I2C_SR2;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	041b      	lsls	r3, r3, #16
 8000b9a:	60fb      	str	r3, [r7, #12]
		lastEvent = (flag1 | flag2) & ((uint32_t)0x00FFFFFFF);
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000ba6:	60bb      	str	r3, [r7, #8]
		if ((lastEvent & master_byte_transmitting) == master_byte_transmitting) {
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <get_flag_status+0xf4>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <get_flag_status+0xf4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d102      	bne.n	8000bba <get_flag_status+0xb2>
			bitStat = set;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	75fb      	strb	r3, [r7, #23]
		break;
 8000bb8:	e01a      	b.n	8000bf0 <get_flag_status+0xe8>
			bitStat = reset;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	75fb      	strb	r3, [r7, #23]
		break;
 8000bbe:	e017      	b.n	8000bf0 <get_flag_status+0xe8>
		if ((I2Cx->I2C_SR1) & (I2C_SR1_TXE)) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <get_flag_status+0xca>
			bitStat = set;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	75fb      	strb	r3, [r7, #23]
		break;
 8000bd0:	e00e      	b.n	8000bf0 <get_flag_status+0xe8>
			bitStat = reset;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	75fb      	strb	r3, [r7, #23]
		break;
 8000bd6:	e00b      	b.n	8000bf0 <get_flag_status+0xe8>
		if ((I2Cx->I2C_SR1) & (I2C_SR1_RXNE)) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <get_flag_status+0xe2>
			bitStat = set;
 8000be4:	2301      	movs	r3, #1
 8000be6:	75fb      	strb	r3, [r7, #23]
		break;
 8000be8:	e001      	b.n	8000bee <get_flag_status+0xe6>
			bitStat = reset;
 8000bea:	2300      	movs	r3, #0
 8000bec:	75fb      	strb	r3, [r7, #23]
		break;
 8000bee:	bf00      	nop
	}




	return bitStat;
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	00070080 	.word	0x00070080

08000c00 <send_address>:

void send_address(I2C_Typedef * I2Cx,uint16_t address,direction direc){
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <send_address+0x64>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	bf14      	ite	ne
 8000c18:	2301      	movne	r3, #1
 8000c1a:	2300      	moveq	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	73fb      	strb	r3, [r7, #15]

	if(global_I2C_config[index].slave_address.addressing_slave_mode == I2C_ADDRESSING_SLAVE_MODE_7BIT){
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	4911      	ldr	r1, [pc, #68]	; (8000c68 <send_address+0x68>)
 8000c24:	4613      	mov	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4413      	add	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3310      	adds	r3, #16
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d111      	bne.n	8000c5a <send_address+0x5a>
		address = address << 1;
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	807b      	strh	r3, [r7, #2]

		if (direc != transmitter) {
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <send_address+0x4c>
			//Set the address' bit 0 to 1 read
			address |= 1<<0;
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	807b      	strh	r3, [r7, #2]
 8000c4a:	e003      	b.n	8000c54 <send_address+0x54>
		} else {
			//Set the address' bit 0 to 0 for write
			address &= ~(1<<0);
 8000c4c:	887b      	ldrh	r3, [r7, #2]
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	807b      	strh	r3, [r7, #2]
		}

		//Send the address
		I2Cx->I2C_DR = address;
 8000c54:	887a      	ldrh	r2, [r7, #2]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	611a      	str	r2, [r3, #16]

	}else{
		//10 bits not supported yet!!!
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40005400 	.word	0x40005400
 8000c68:	2000001c 	.word	0x2000001c

08000c6c <generate_stop>:

void generate_stop(I2C_Typedef * I2Cx, functional_state newState){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
	if (newState != disable) {
 8000c78:	78fb      	ldrb	r3, [r7, #3]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d006      	beq.n	8000c8c <generate_stop+0x20>
		//Generate stop condition
		I2Cx->I2C_CR1 |= I2C_CR1_STOP;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
	} else {
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000c8a:	e005      	b.n	8000c98 <generate_stop+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
	...

08000ca4 <I2C1_EV_IRQHandler>:
uint8_t MCAL_I2C_slave_RX(I2C_Typedef * I2Cx){
	return (uint8_t)I2Cx->I2C_DR;
}

/* I2C1 event interrupt */
void I2C1_EV_IRQHandler(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0 , temp1, temp2, temp3;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
	I2C_Typedef * I2Cx = I2C1;
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <I2C1_EV_IRQHandler+0xe8>)
 8000cb0:	617b      	str	r3, [r7, #20]

	temp1 = I2Cx->I2C_CR2 & I2C_CR2_ITEVTEN;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cba:	60fb      	str	r3, [r7, #12]
	temp2 = I2Cx->I2C_CR2 & I2C_CR2_ITBUFEN;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc4:	60bb      	str	r3, [r7, #8]

	temp3 = I2Cx->I2C_SR1 & I2C_SR1_STOPF;
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	607b      	str	r3, [r7, #4]

	//Handle for interrupt generated by STOPF event
	//Note: stop detection flag is applicable only in slave mode
	if (temp1 && temp3) {
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <I2C1_EV_IRQHandler+0x48>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d007      	beq.n	8000cec <I2C1_EV_IRQHandler+0x48>
		I2Cx->I2C_CR1 |= 0x0000;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	601a      	str	r2, [r3, #0]
		slave_states(I2Cx, i2c_ev_stop);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f000 f864 	bl	8000db4 <slave_states>
	}
	//-----------------------------------------------------------------------
	temp3 = I2Cx->I2C_SR1 & I2C_SR1_ADDR;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	607b      	str	r3, [r7, #4]

	//Handle for interrupt generated by ADDR event
	/*Note: when in master mode: address is sent
	 * 		when in slave mode: address is matched with its own address*/
	if (temp1 && temp3) {
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d012      	beq.n	8000d22 <I2C1_EV_IRQHandler+0x7e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00f      	beq.n	8000d22 <I2C1_EV_IRQHandler+0x7e>
		//Interrupt is generated because of ADDR event
		//Check for device mode
		if (I2Cx->I2C_SR2 & I2C_SR2_MSL) {
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d109      	bne.n	8000d22 <I2C1_EV_IRQHandler+0x7e>
			//Master mode
		} else {
			//Slave Mode
			//Clear the ADDR flag (read sr1, sr2)
			dummyRead = I2Cx->I2C_SR1;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	613b      	str	r3, [r7, #16]
			dummyRead = I2Cx->I2C_SR2;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	613b      	str	r3, [r7, #16]
			slave_states(I2Cx, i2c_ev_addr_matched);
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f000 f849 	bl	8000db4 <slave_states>
		}
	}
	//-----------------------------------------------------------------------

	temp3 = I2Cx->I2C_SR1 & I2C_SR1_TXE;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	607b      	str	r3, [r7, #4]

	//Handle for interrupt generated by TXE event
	if (temp1 && temp2 && temp3) {
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00f      	beq.n	8000d52 <I2C1_EV_IRQHandler+0xae>
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00c      	beq.n	8000d52 <I2C1_EV_IRQHandler+0xae>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d009      	beq.n	8000d52 <I2C1_EV_IRQHandler+0xae>
		if (I2Cx->I2C_SR2 & I2C_SR2_MSL) {
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <I2C1_EV_IRQHandler+0xae>
			//Master mode
		} else {
			//Slave mode
			slave_states(I2Cx, i2c_ev_data_req);
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	6978      	ldr	r0, [r7, #20]
 8000d4e:	f000 f831 	bl	8000db4 <slave_states>
		}
	}

	//-----------------------------------------------------------------------

	temp3 = I2Cx->I2C_SR1 & I2C_SR1_RXNE;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5a:	607b      	str	r3, [r7, #4]

	//Handle for interrupt generated by RXNE event
	if (temp1 && temp2 && temp3) {
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00f      	beq.n	8000d82 <I2C1_EV_IRQHandler+0xde>
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d00c      	beq.n	8000d82 <I2C1_EV_IRQHandler+0xde>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d009      	beq.n	8000d82 <I2C1_EV_IRQHandler+0xde>
		if (I2Cx->I2C_SR2 & I2C_SR2_MSL) {
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d103      	bne.n	8000d82 <I2C1_EV_IRQHandler+0xde>
			//Master mode
		} else {
			//Slave mode
			slave_states(I2Cx, i2c_ev_data_rcv);
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	6978      	ldr	r0, [r7, #20]
 8000d7e:	f000 f819 	bl	8000db4 <slave_states>
		}
	}

}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40005400 	.word	0x40005400

08000d90 <I2C1_ER_IRQHandler>:

/* I2C1 error interrupt*/
void I2C1_ER_IRQHandler(void){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <I2C2_EV_IRQHandler>:

/* I2C2 event interrupt */
void I2C2_EV_IRQHandler(void){
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <I2C2_ER_IRQHandler>:

/* I2C2 error interrupt*/
void I2C2_ER_IRQHandler(void){
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <slave_states>:

void slave_states(I2C_Typedef * I2Cx, slave_state state){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a33      	ldr	r2, [pc, #204]	; (8000e90 <slave_states+0xdc>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	bf14      	ite	ne
 8000dc8:	2301      	movne	r3, #1
 8000dca:	2300      	moveq	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	73fb      	strb	r3, [r7, #15]

	switch (state) {
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d851      	bhi.n	8000e7a <slave_states+0xc6>
 8000dd6:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <slave_states+0x28>)
 8000dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ddc:	08000df7 	.word	0x08000df7
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000e1b 	.word	0x08000e1b
 8000de8:	08000e33 	.word	0x08000e33
 8000dec:	08000e57 	.word	0x08000e57
	case i2c_error_af:{
		//Make sure that the slave is really in transmitter mode
		if (I2Cx->I2C_SR2 & I2C_SR2_TRA) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	699b      	ldr	r3, [r3, #24]
			//Slave shouldn't send anything else
		}

		break;
 8000df4:	e048      	b.n	8000e88 <slave_states+0xd4>
	}

	case i2c_ev_stop:{
		//Make sure that the slave is really in transmitter mode
		if (I2Cx->I2C_SR2 & I2C_SR2_TRA) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d03d      	beq.n	8000e7e <slave_states+0xca>
			global_I2C_config[index].p_slave_event_callback(i2c_ev_stop);
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	4923      	ldr	r1, [pc, #140]	; (8000e94 <slave_states+0xe0>)
 8000e06:	4613      	mov	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	440b      	add	r3, r1
 8000e10:	3320      	adds	r3, #32
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2000      	movs	r0, #0
 8000e16:	4798      	blx	r3
		}

		break;
 8000e18:	e031      	b.n	8000e7e <slave_states+0xca>
	}

	case i2c_ev_addr_matched:{

		//Notify APP that the stop condition is sent by the master
		global_I2C_config[index].p_slave_event_callback(i2c_ev_addr_matched);
 8000e1a:	7bfa      	ldrb	r2, [r7, #15]
 8000e1c:	491d      	ldr	r1, [pc, #116]	; (8000e94 <slave_states+0xe0>)
 8000e1e:	4613      	mov	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	3320      	adds	r3, #32
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	4798      	blx	r3


		break;
 8000e30:	e02a      	b.n	8000e88 <slave_states+0xd4>
	}

	case i2c_ev_data_req:{

		//Make sure that the slave is really in transmitter mode
		if (I2Cx->I2C_SR2 & I2C_SR2_TRA) {
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d021      	beq.n	8000e82 <slave_states+0xce>
			//The app layer should send the data (MCAL_I2C_slave_TX) in this state
			global_I2C_config[index].p_slave_event_callback(i2c_ev_data_req);
 8000e3e:	7bfa      	ldrb	r2, [r7, #15]
 8000e40:	4914      	ldr	r1, [pc, #80]	; (8000e94 <slave_states+0xe0>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3320      	adds	r3, #32
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2003      	movs	r0, #3
 8000e52:	4798      	blx	r3
		}

		break;
 8000e54:	e015      	b.n	8000e82 <slave_states+0xce>
	}

	case i2c_ev_data_rcv:{

		//Make sure that the slave is really in transmitter mode
		if (I2Cx->I2C_SR2 & I2C_SR2_TRA) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d011      	beq.n	8000e86 <slave_states+0xd2>
			//The app layer should read the data (MCAL_I2C_slave_RX) in this state
			global_I2C_config[index].p_slave_event_callback(i2c_ev_data_rcv);
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	490b      	ldr	r1, [pc, #44]	; (8000e94 <slave_states+0xe0>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	3320      	adds	r3, #32
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2004      	movs	r0, #4
 8000e76:	4798      	blx	r3
		}

		break;
 8000e78:	e005      	b.n	8000e86 <slave_states+0xd2>
	}
	default:
		break;
 8000e7a:	bf00      	nop
 8000e7c:	e004      	b.n	8000e88 <slave_states+0xd4>
		break;
 8000e7e:	bf00      	nop
 8000e80:	e002      	b.n	8000e88 <slave_states+0xd4>
		break;
 8000e82:	bf00      	nop
 8000e84:	e000      	b.n	8000e88 <slave_states+0xd4>
		break;
 8000e86:	bf00      	nop
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40005400 	.word	0x40005400
 8000e94:	2000001c 	.word	0x2000001c

08000e98 <acknowledge_config>:

void acknowledge_config(I2C_Typedef * I2Cx, functional_state newState){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]

	if (newState != disable) {
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <acknowledge_config+0x20>
		//Enable the acknowledgment
		I2Cx->I2C_CR1 |= I2C_CR1_ACK;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
	} else {
		//Disable the acknowledgment
		I2Cx->I2C_CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000eb6:	e005      	b.n	8000ec4 <acknowledge_config+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_ACK);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
	...

08000ed0 <MCAL_RCC_getSYSCLKFreq>:
1111: SYSCLK divided by 512
*/
const uint8_t AHBPrescTable [16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};


uint32_t MCAL_RCC_getSYSCLKFreq(void){
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
	Set and cleared by hardware to indicate which clock source is used as system clock.
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/
	switch((RCC->CFGR >> 2) & 0b11){
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MCAL_RCC_getSYSCLKFreq+0x30>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d006      	beq.n	8000ef0 <MCAL_RCC_getSYSCLKFreq+0x20>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d302      	bcc.n	8000eec <MCAL_RCC_getSYSCLKFreq+0x1c>
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d004      	beq.n	8000ef4 <MCAL_RCC_getSYSCLKFreq+0x24>
 8000eea:	e005      	b.n	8000ef8 <MCAL_RCC_getSYSCLKFreq+0x28>

	case 0:
		return HSI_RC_CLK;
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <MCAL_RCC_getSYSCLKFreq+0x34>)
 8000eee:	e003      	b.n	8000ef8 <MCAL_RCC_getSYSCLKFreq+0x28>

	case 1:
		//todo needed to be calculated user should specifiy it
		return HSE_CLK;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <MCAL_RCC_getSYSCLKFreq+0x38>)
 8000ef2:	e001      	b.n	8000ef8 <MCAL_RCC_getSYSCLKFreq+0x28>

	case 2:
		////todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <MCAL_RCC_getSYSCLKFreq+0x38>)
 8000ef6:	e7ff      	b.n	8000ef8 <MCAL_RCC_getSYSCLKFreq+0x28>
	}
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000
 8000f04:	007a1200 	.word	0x007a1200
 8000f08:	00f42400 	.word	0x00f42400

08000f0c <MCAL_RCC_getHCLKFreq>:


uint32_t MCAL_RCC_getHCLKFreq(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_getSYSCLKFreq() >> AHBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 8000f10:	f7ff ffde 	bl	8000ed0 <MCAL_RCC_getSYSCLKFreq>
 8000f14:	4601      	mov	r1, r0
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <MCAL_RCC_getHCLKFreq+0x20>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <MCAL_RCC_getHCLKFreq+0x24>)
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	080011b4 	.word	0x080011b4

08000f34 <MCAL_RCC_getPCLK1Freq>:

uint32_t MCAL_RCC_getPCLK1Freq(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_getHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 8000f38:	f7ff ffe8 	bl	8000f0c <MCAL_RCC_getHCLKFreq>
 8000f3c:	4601      	mov	r1, r0
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <MCAL_RCC_getPCLK1Freq+0x20>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <MCAL_RCC_getPCLK1Freq+0x24>)
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	080011ac 	.word	0x080011ac

08000f5c <SPI1_IRQHandler>:
	MCAL_SPI_receive_date(SPIx, data, pollEn);
}



void SPI1_IRQHandler(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	IRQ_SPI_src_t irq_src ;

	irq_src.TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <SPI1_IRQHandler+0x50>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	085b      	lsrs	r3, r3, #1
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	793b      	ldrb	r3, [r7, #4]
 8000f70:	f362 0300 	bfi	r3, r2, #0, #1
 8000f74:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <SPI1_IRQHandler+0x50>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	793b      	ldrb	r3, [r7, #4]
 8000f82:	f362 0341 	bfi	r3, r2, #1, #1
 8000f86:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <SPI1_IRQHandler+0x50>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	793b      	ldrb	r3, [r7, #4]
 8000f96:	f362 0382 	bfi	r3, r2, #2, #1
 8000f9a:	713b      	strb	r3, [r7, #4]

	global_SPI_config[SPI1_INDEX].p_IRQ_callback(irq_src);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SPI1_IRQHandler+0x54>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	7938      	ldrb	r0, [r7, #4]
 8000fa2:	4798      	blx	r3
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	200000a0 	.word	0x200000a0

08000fb4 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	IRQ_SPI_src_t irq_src ;

	irq_src.TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <SPI2_IRQHandler+0x50>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	793b      	ldrb	r3, [r7, #4]
 8000fc8:	f362 0300 	bfi	r3, r2, #0, #1
 8000fcc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SPI2_IRQHandler+0x50>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	793b      	ldrb	r3, [r7, #4]
 8000fda:	f362 0341 	bfi	r3, r2, #1, #1
 8000fde:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SPI2_IRQHandler+0x50>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	793b      	ldrb	r3, [r7, #4]
 8000fee:	f362 0382 	bfi	r3, r2, #2, #1
 8000ff2:	713b      	strb	r3, [r7, #4]

	global_SPI_config[SPI2_INDEX].p_IRQ_callback(irq_src);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SPI2_IRQHandler+0x54>)
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	7938      	ldrb	r0, [r7, #4]
 8000ffa:	4798      	blx	r3
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40003800 	.word	0x40003800
 8001008:	200000a0 	.word	0x200000a0

0800100c <USART1_IRQHandler>:
	//Waiting until transmission is complete
	while(!(USARTX->SR & 1 << 6));
}

//ISR
void USART1_IRQHandler (void){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	Global_UART_Config.p_IRQ_callback();
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <USART1_IRQHandler+0x10>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4798      	blx	r3
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000d0 	.word	0x200000d0

08001020 <USART2_IRQHandler>:

void USART2_IRQHandler (void){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	Global_UART_Config.p_IRQ_callback();
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <USART2_IRQHandler+0x10>)
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	4798      	blx	r3
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000d0 	.word	0x200000d0

08001034 <USART3_IRQHandler>:

void USART3_IRQHandler (void){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	Global_UART_Config.p_IRQ_callback();
 8001038:	4b02      	ldr	r3, [pc, #8]	; (8001044 <USART3_IRQHandler+0x10>)
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	4798      	blx	r3
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000d0 	.word	0x200000d0

08001048 <main>:
void UART_init(void);
void SPI_init(void);
void SPI_irq_callback(IRQ_SPI_src_t irq_src);


int main(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

	//Initializing Peripherals
	clock_init();
 800104e:	f000 f835 	bl	80010bc <clock_init>
	eeprom_init();
 8001052:	f7ff f88d 	bl	8000170 <eeprom_init>
//	UART_init();
//	SPI_init();

	//Test case 1
	unsigned char ch1 [] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7};
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <main+0x70>)
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001060:	6018      	str	r0, [r3, #0]
 8001062:	3304      	adds	r3, #4
 8001064:	8019      	strh	r1, [r3, #0]
 8001066:	3302      	adds	r3, #2
 8001068:	0c0a      	lsrs	r2, r1, #16
 800106a:	701a      	strb	r2, [r3, #0]
	unsigned char ch2 [7];

	eeprom_write_nBytes(0xAF, ch1, 7);
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2207      	movs	r2, #7
 8001072:	4619      	mov	r1, r3
 8001074:	20af      	movs	r0, #175	; 0xaf
 8001076:	f7ff f89b 	bl	80001b0 <eeprom_write_nBytes>
	eeprom_read_nBytes(0xAF, ch2, 7);
 800107a:	463b      	mov	r3, r7
 800107c:	2207      	movs	r2, #7
 800107e:	4619      	mov	r1, r3
 8001080:	20af      	movs	r0, #175	; 0xaf
 8001082:	f7ff f8e3 	bl	800024c <eeprom_read_nBytes>

	//Test case 2

	ch1[0] = 0xA;
 8001086:	230a      	movs	r3, #10
 8001088:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 800108a:	230b      	movs	r3, #11
 800108c:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 800108e:	230c      	movs	r3, #12
 8001090:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8001092:	230d      	movs	r3, #13
 8001094:	72fb      	strb	r3, [r7, #11]

	eeprom_write_nBytes(0xFFF, ch1, 4);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2204      	movs	r2, #4
 800109c:	4619      	mov	r1, r3
 800109e:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010a2:	f7ff f885 	bl	80001b0 <eeprom_write_nBytes>
	eeprom_read_nBytes(0xFFF, ch2, 4);
 80010a6:	463b      	mov	r3, r7
 80010a8:	2204      	movs	r2, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010b0:	f7ff f8cc 	bl	800024c <eeprom_read_nBytes>

	while(1){
 80010b4:	e7fe      	b.n	80010b4 <main+0x6c>
 80010b6:	bf00      	nop
 80010b8:	080011a4 	.word	0x080011a4

080010bc <clock_init>:
 *
 * =======================================================================================
 * 							APIs Implementations
 * =======================================================================================
 */
void clock_init(void){
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	//Enabling GPIOs
	RCC_GPIOA_CLK_EN();
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <clock_init+0x30>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a09      	ldr	r2, [pc, #36]	; (80010ec <clock_init+0x30>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <clock_init+0x30>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <clock_init+0x30>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]

	//Enabling AFIO
	RCC_AFIO_CLK_EN();
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <clock_init+0x30>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a03      	ldr	r2, [pc, #12]	; (80010ec <clock_init+0x30>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6193      	str	r3, [r2, #24]

}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000

080010f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800111e:	f000 f811 	bl	8001144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001122:	f7ff ff91 	bl	8001048 <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   r0, =_estack
 8001128:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001134:	080011cc 	.word	0x080011cc
  ldr r2, =_sbss
 8001138:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800113c:	200000e4 	.word	0x200000e4

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <__libc_init_array>:
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	2500      	movs	r5, #0
 8001148:	4e0c      	ldr	r6, [pc, #48]	; (800117c <__libc_init_array+0x38>)
 800114a:	4c0d      	ldr	r4, [pc, #52]	; (8001180 <__libc_init_array+0x3c>)
 800114c:	1ba4      	subs	r4, r4, r6
 800114e:	10a4      	asrs	r4, r4, #2
 8001150:	42a5      	cmp	r5, r4
 8001152:	d109      	bne.n	8001168 <__libc_init_array+0x24>
 8001154:	f000 f81a 	bl	800118c <_init>
 8001158:	2500      	movs	r5, #0
 800115a:	4e0a      	ldr	r6, [pc, #40]	; (8001184 <__libc_init_array+0x40>)
 800115c:	4c0a      	ldr	r4, [pc, #40]	; (8001188 <__libc_init_array+0x44>)
 800115e:	1ba4      	subs	r4, r4, r6
 8001160:	10a4      	asrs	r4, r4, #2
 8001162:	42a5      	cmp	r5, r4
 8001164:	d105      	bne.n	8001172 <__libc_init_array+0x2e>
 8001166:	bd70      	pop	{r4, r5, r6, pc}
 8001168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800116c:	4798      	blx	r3
 800116e:	3501      	adds	r5, #1
 8001170:	e7ee      	b.n	8001150 <__libc_init_array+0xc>
 8001172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001176:	4798      	blx	r3
 8001178:	3501      	adds	r5, #1
 800117a:	e7f2      	b.n	8001162 <__libc_init_array+0x1e>
 800117c:	080011c4 	.word	0x080011c4
 8001180:	080011c4 	.word	0x080011c4
 8001184:	080011c4 	.word	0x080011c4
 8001188:	080011c8 	.word	0x080011c8

0800118c <_init>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	bf00      	nop
 8001190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001192:	bc08      	pop	{r3}
 8001194:	469e      	mov	lr, r3
 8001196:	4770      	bx	lr

08001198 <_fini>:
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119a:	bf00      	nop
 800119c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119e:	bc08      	pop	{r3}
 80011a0:	469e      	mov	lr, r3
 80011a2:	4770      	bx	lr
