
ATmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d69  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fd  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000637  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000585  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023b  00000000  00000000  00002579  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  8a:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <execute_comand>:

void MAX2719_clear_display(void){
	for (uint8_t i = 0; i < 8; i++){
		execute_comand(i,0);
	}
}
  92:	cf 93       	push	r28
  94:	c6 2f       	mov	r28, r22
  96:	98 b3       	in	r25, 0x18	; 24
  98:	9f 7e       	andi	r25, 0xEF	; 239
  9a:	98 bb       	out	0x18, r25	; 24
  9c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_transfer_data>
  a0:	8c 2f       	mov	r24, r28
  a2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_transfer_data>
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <MAX2719_init>:
  b0:	6f ef       	ldi	r22, 0xFF	; 255
  b2:	89 e0       	ldi	r24, 0x09	; 9
  b4:	0e 94 49 00 	call	0x92	; 0x92 <execute_comand>
  b8:	67 e0       	ldi	r22, 0x07	; 7
  ba:	8b e0       	ldi	r24, 0x0B	; 11
  bc:	0e 94 49 00 	call	0x92	; 0x92 <execute_comand>
  c0:	6f e0       	ldi	r22, 0x0F	; 15
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	0e 94 49 00 	call	0x92	; 0x92 <execute_comand>
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	0e 94 49 00 	call	0x92	; 0x92 <execute_comand>
  d0:	08 95       	ret

000000d2 <MAX2719_display>:
 * @retval 			-none
 * Note				-none
 *============================================================================
 */
void MAX2719_display(uint8_t screen_number, uint8_t data){
	execute_comand(screen_number,data);
  d2:	0e 94 49 00 	call	0x92	; 0x92 <execute_comand>
  d6:	08 95       	ret

000000d8 <lab2>:
	}
	
	#endif
}

void lab2(void){
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	2a 97       	sbiw	r28, 0x0a	; 10
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t counter = 0;
	SPI_config_t conf;
	conf.enable = SPI_Enable_on;
  ec:	85 e1       	ldi	r24, 0x15	; 21
  ee:	8b 83       	std	Y+3, r24	; 0x03
	conf.master_slave_mode = SPI_Master;
  f0:	89 83       	std	Y+1, r24	; 0x01
	SPI_init(&conf);
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_init>
	MAX2719_init();
  fa:	0e 94 58 00 	call	0xb0	; 0xb0 <MAX2719_init>
	
	#endif
}

void lab2(void){
	uint8_t counter = 0;
  fe:	60 e0       	ldi	r22, 0x00	; 0
	conf.master_slave_mode = SPI_Master;
	SPI_init(&conf);
	MAX2719_init();
		
	while(1){
		for (uint8_t index_display = 1; index_display < 9; index_display++){
 100:	11 e0       	ldi	r17, 0x01	; 1
 102:	07 c0       	rjmp	.+14     	; 0x112 <lab2+0x3a>
			MAX2719_display(index_display, counter++);
 104:	01 e0       	ldi	r16, 0x01	; 1
 106:	06 0f       	add	r16, r22
 108:	81 2f       	mov	r24, r17
 10a:	0e 94 69 00 	call	0xd2	; 0xd2 <MAX2719_display>
	conf.master_slave_mode = SPI_Master;
	SPI_init(&conf);
	MAX2719_init();
		
	while(1){
		for (uint8_t index_display = 1; index_display < 9; index_display++){
 10e:	1f 5f       	subi	r17, 0xFF	; 255
			MAX2719_display(index_display, counter++);
 110:	60 2f       	mov	r22, r16
	conf.master_slave_mode = SPI_Master;
	SPI_init(&conf);
	MAX2719_init();
		
	while(1){
		for (uint8_t index_display = 1; index_display < 9; index_display++){
 112:	19 30       	cpi	r17, 0x09	; 9
 114:	b8 f3       	brcs	.-18     	; 0x104 <lab2+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f e3       	ldi	r18, 0x3F	; 63
 118:	8d e0       	ldi	r24, 0x0D	; 13
 11a:	93 e0       	ldi	r25, 0x03	; 3
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <lab2+0x44>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lab2+0x4e>
 126:	00 00       	nop
 128:	eb cf       	rjmp	.-42     	; 0x100 <lab2+0x28>

0000012a <main>:
void lab1(void);
void lab2(void);

int main(void){
	
	lab2();
 12a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lab2>

0000012e <SPI_init>:
 *  Author: Ahmed
 */ 
#include "SPI.h"
static void (*SPI_ISR)(void);

void SPI_init(SPI_config_t * spi){
 12e:	fc 01       	movw	r30, r24
	
	//Enabling interrupt and assigning callback function
	if (spi->interrupt == SPI_Interrupt_on){
 130:	86 81       	ldd	r24, Z+6	; 0x06
 132:	85 31       	cpi	r24, 0x15	; 21
 134:	21 f4       	brne	.+8      	; 0x13e <SPI_init+0x10>
		SET_BIT(SPCR,SPIE);
 136:	8d b1       	in	r24, 0x0d	; 13
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8d b9       	out	0x0d, r24	; 13
 13c:	05 c0       	rjmp	.+10     	; 0x148 <SPI_init+0x1a>
		SPI_ISR = spi->ptr_SPI;
	} else if (spi->interrupt == SPI_Interrupt_off) {
 13e:	84 31       	cpi	r24, 0x14	; 20
 140:	19 f4       	brne	.+6      	; 0x148 <SPI_init+0x1a>
		CLEAR_BIT(SPCR,SPIE);
 142:	8d b1       	in	r24, 0x0d	; 13
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	8d b9       	out	0x0d, r24	; 13
	}
	
	//Data order
	if (spi->data_order == SPI_LSB_First){
 148:	81 85       	ldd	r24, Z+9	; 0x09
 14a:	85 31       	cpi	r24, 0x15	; 21
 14c:	21 f4       	brne	.+8      	; 0x156 <SPI_init+0x28>
		SET_BIT(SPCR,DORD);
 14e:	8d b1       	in	r24, 0x0d	; 13
 150:	80 62       	ori	r24, 0x20	; 32
 152:	8d b9       	out	0x0d, r24	; 13
 154:	05 c0       	rjmp	.+10     	; 0x160 <SPI_init+0x32>
	} else if (spi->data_order == SPI_MSB_First){
 156:	84 31       	cpi	r24, 0x14	; 20
 158:	19 f4       	brne	.+6      	; 0x160 <SPI_init+0x32>
		CLEAR_BIT(SPCR,DORD);
 15a:	8d b1       	in	r24, 0x0d	; 13
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	8d b9       	out	0x0d, r24	; 13
	}
	
	//Master & Slave setup
	if (spi->master_slave_mode == SPI_Master){
 160:	80 81       	ld	r24, Z
 162:	85 31       	cpi	r24, 0x15	; 21
 164:	d1 f4       	brne	.+52     	; 0x19a <SPI_init+0x6c>
		SET_BIT(SPCR,MSTR);
 166:	8d b1       	in	r24, 0x0d	; 13
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	8d b9       	out	0x0d, r24	; 13
		//Set MOSI, SCK, SS as outputs
		SPI_DDR |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
 16c:	87 b3       	in	r24, 0x17	; 23
 16e:	80 6b       	ori	r24, 0xB0	; 176
 170:	87 bb       	out	0x17, r24	; 23
		//Set MISO as input
		SPI_DDR &= ~(1 << SPI_MISO);
 172:	87 b3       	in	r24, 0x17	; 23
 174:	8f 7b       	andi	r24, 0xBF	; 191
 176:	87 bb       	out	0x17, r24	; 23
		
		//Pre-scalar
		SPCR = SPCR | (spi->prescalar);
 178:	9d b1       	in	r25, 0x0d	; 13
 17a:	81 81       	ldd	r24, Z+1	; 0x01
 17c:	89 2b       	or	r24, r25
 17e:	8d b9       	out	0x0d, r24	; 13
		
		//Double speed
		if (spi->double_speed == SPI_Double_Speed_on){
 180:	83 81       	ldd	r24, Z+3	; 0x03
 182:	85 31       	cpi	r24, 0x15	; 21
 184:	21 f4       	brne	.+8      	; 0x18e <SPI_init+0x60>
			SET_BIT(SPCR,SPI2X);
 186:	8d b1       	in	r24, 0x0d	; 13
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	8d b9       	out	0x0d, r24	; 13
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <SPI_init+0x82>
		} else if (spi->double_speed == SPI_Double_Speed_off){
 18e:	84 31       	cpi	r24, 0x14	; 20
 190:	79 f4       	brne	.+30     	; 0x1b0 <SPI_init+0x82>
			CLEAR_BIT(SPCR,SPI2X);
 192:	8d b1       	in	r24, 0x0d	; 13
 194:	8e 7f       	andi	r24, 0xFE	; 254
 196:	8d b9       	out	0x0d, r24	; 13
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <SPI_init+0x82>
		}
		
	} else if (spi->master_slave_mode == SPI_Slave){
 19a:	84 31       	cpi	r24, 0x14	; 20
 19c:	49 f4       	brne	.+18     	; 0x1b0 <SPI_init+0x82>
		CLEAR_BIT(SPCR,MSTR);
 19e:	8d b1       	in	r24, 0x0d	; 13
 1a0:	8f 7e       	andi	r24, 0xEF	; 239
 1a2:	8d b9       	out	0x0d, r24	; 13
		//Set MISO as output
		SPI_DDR |=	(1 << SPI_MISO);
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	87 bb       	out	0x17, r24	; 23
		//Set SS, SCK, and MOSI as inputs
		SPI_DDR &= ~((1 << SPI_MOSI) | (1 << SPI_SS) | (1 << SPI_SCK));
 1aa:	87 b3       	in	r24, 0x17	; 23
 1ac:	8f 74       	andi	r24, 0x4F	; 79
 1ae:	87 bb       	out	0x17, r24	; 23
	}
	
	//Clock polarity
	if (spi->operating_level == SPI_Idle_Low){
 1b0:	84 81       	ldd	r24, Z+4	; 0x04
 1b2:	84 31       	cpi	r24, 0x14	; 20
 1b4:	21 f4       	brne	.+8      	; 0x1be <SPI_init+0x90>
		SET_BIT(SPCR,CPOL);
 1b6:	8d b1       	in	r24, 0x0d	; 13
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	8d b9       	out	0x0d, r24	; 13
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <SPI_init+0x9a>
	} else if (spi->operating_level == SPI_Idle_High){
 1be:	85 31       	cpi	r24, 0x15	; 21
 1c0:	19 f4       	brne	.+6      	; 0x1c8 <SPI_init+0x9a>
		CLEAR_BIT(SPCR,CPOL);
 1c2:	8d b1       	in	r24, 0x0d	; 13
 1c4:	87 7f       	andi	r24, 0xF7	; 247
 1c6:	8d b9       	out	0x0d, r24	; 13
	}
	
	//Clock phase
	if (spi->smapling_edge == SPI_Rising){
 1c8:	85 81       	ldd	r24, Z+5	; 0x05
 1ca:	85 31       	cpi	r24, 0x15	; 21
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <SPI_init+0xa8>
		SET_BIT(SPCR,CPHA);
 1ce:	8d b1       	in	r24, 0x0d	; 13
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	8d b9       	out	0x0d, r24	; 13
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <SPI_init+0xb2>
	} else if (spi->smapling_edge == SPI_Falling){
 1d6:	84 31       	cpi	r24, 0x14	; 20
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <SPI_init+0xb2>
		CLEAR_BIT(SPCR,CPHA);
 1da:	8d b1       	in	r24, 0x0d	; 13
 1dc:	8b 7f       	andi	r24, 0xFB	; 251
 1de:	8d b9       	out	0x0d, r24	; 13
	}
	
	if (spi->enable == SPI_Enable_on){
 1e0:	82 81       	ldd	r24, Z+2	; 0x02
 1e2:	85 31       	cpi	r24, 0x15	; 21
 1e4:	21 f4       	brne	.+8      	; 0x1ee <SPI_init+0xc0>
		SET_BIT(SPCR,SPE);
 1e6:	8d b1       	in	r24, 0x0d	; 13
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	8d b9       	out	0x0d, r24	; 13
 1ec:	08 95       	ret
	} else if (spi->enable == SPI_Enable_off){
 1ee:	84 31       	cpi	r24, 0x14	; 20
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <SPI_init+0xca>
		CLEAR_BIT(SPCR,SPE);
 1f2:	8d b1       	in	r24, 0x0d	; 13
 1f4:	8f 7b       	andi	r24, 0xBF	; 191
 1f6:	8d b9       	out	0x0d, r24	; 13
 1f8:	08 95       	ret

000001fa <SPI_transfer_data>:
	}
	
}

uint8_t SPI_transfer_data(uint8_t data){
	SPDR = data;
 1fa:	8f b9       	out	0x0f, r24	; 15
	//Waiting for data to complete transfers
	while(!(SPSR & (1 << SPIF)));
 1fc:	77 9b       	sbis	0x0e, 7	; 14
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <SPI_transfer_data+0x2>
	return SPDR;
 200:	8f b1       	in	r24, 0x0f	; 15
}
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
