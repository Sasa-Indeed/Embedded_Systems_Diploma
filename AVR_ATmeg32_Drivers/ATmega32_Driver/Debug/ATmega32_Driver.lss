
ATmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000c38  00000ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080006c  0080006c  00000cd8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d4  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b66  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3d  00000000  00000000  0000300a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00003c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092c  00000000  00000000  00003fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000865  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000516d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_10>
  2c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fe 01 	call	0x3fc	; 0x3fc <main>
  8a:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_callBack>:




void ADC_callBack(void){
	data = ((data * 100) / 1023);
  92:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <data>
  96:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <data+0x1>
  9a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <data+0x2>
  9e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <data+0x3>
  a2:	a4 e6       	ldi	r26, 0x64	; 100
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	0e 94 16 03 	call	0x62c	; 0x62c <__muluhisi3>
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	33 e0       	ldi	r19, 0x03	; 3
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodsi4>
  b6:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <data>
  ba:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <data+0x1>
  be:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <data+0x2>
  c2:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <data+0x3>
	LCD_WRITE_STRING("Perc : ");
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_WRITE_STRING>
	LCD_WRITE_Intger_Number(data);
  ce:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <data>
  d2:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <data+0x1>
  d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <data+0x2>
  da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <data+0x3>
  de:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_Intger_Number>
	LCD_WRITE_CHAR('%');
  e2:	85 e2       	ldi	r24, 0x25	; 37
  e4:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_WRITE_CHAR>
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW);
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
	barSize = (160 / (1000 / data));
  ee:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <data>
  f2:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <data+0x1>
  f6:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <data+0x2>
  fa:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <data+0x3>
  fe:	68 ee       	ldi	r22, 0xE8	; 232
 100:	73 e0       	ldi	r23, 0x03	; 3
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodsi4>
 10a:	60 ea       	ldi	r22, 0xA0	; 160
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodsi4>
 116:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <barSize>
 11a:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <barSize+0x1>
 11e:	40 93 80 00 	sts	0x0080, r20	; 0x800080 <barSize+0x2>
 122:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <barSize+0x3>
	for (i = 0; i < barSize; i++){
 126:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <i>
 12a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <i+0x1>
 12e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <i+0x2>
 132:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <i+0x3>
 136:	16 c0       	rjmp	.+44     	; 0x164 <ADC_callBack+0xd2>
		LCD_WRITE_CHAR(0xff);
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_WRITE_CHAR>
	LCD_WRITE_STRING("Perc : ");
	LCD_WRITE_Intger_Number(data);
	LCD_WRITE_CHAR('%');
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW);
	barSize = (160 / (1000 / data));
	for (i = 0; i < barSize; i++){
 13e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <i>
 142:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <i+0x1>
 146:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <i+0x2>
 14a:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <i+0x3>
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	a1 1d       	adc	r26, r1
 152:	b1 1d       	adc	r27, r1
 154:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <i>
 158:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <i+0x1>
 15c:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <i+0x2>
 160:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <i+0x3>
 164:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <i>
 168:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <i+0x1>
 16c:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <i+0x2>
 170:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <i+0x3>
 174:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <barSize>
 178:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <barSize+0x1>
 17c:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <barSize+0x2>
 180:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <barSize+0x3>
 184:	48 17       	cp	r20, r24
 186:	59 07       	cpc	r21, r25
 188:	6a 07       	cpc	r22, r26
 18a:	7b 07       	cpc	r23, r27
 18c:	a8 f2       	brcs	.-86     	; 0x138 <ADC_callBack+0xa6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f e3       	ldi	r18, 0x3F	; 63
 190:	8d e0       	ldi	r24, 0x0D	; 13
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <ADC_callBack+0x102>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <ADC_callBack+0x10c>
 19e:	00 00       	nop
		LCD_WRITE_CHAR(0xff);
	}
	_delay_ms(1000);
	LCD_CLEAR_SCREEN();
 1a0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_CLEAR_SCREEN>
 1a4:	08 95       	ret

000001a6 <ADC_progress_bar_app>:
}
void ADC_progress_bar_app(void){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	29 97       	sbiw	r28, 0x09	; 9
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
	ADC_config_t config;
	
	config.ADC_mode = ADC_MODE_SINGLE_CONVERSION;
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	89 83       	std	Y+1, r24	; 0x01
	config.ADC_prescaler = ADC_PRESCALER_DIV64;
 1be:	96 e0       	ldi	r25, 0x06	; 6
 1c0:	9e 83       	std	Y+6, r25	; 0x06
	config.ADC_data_repersentation = ADC_DATA_REPRESENTATION_RIGHT_ADJUST;
 1c2:	1a 82       	std	Y+2, r1	; 0x02
	config.ADC_volt_ref = ADC_VOLT_REF_AVCC;
 1c4:	8b 83       	std	Y+3, r24	; 0x03
	
	#ifdef USING_POLLING 
	config.ADC_IRQ_enable = ADC_IRQ_DISABLE;
 1c6:	1f 82       	std	Y+7, r1	; 0x07
	config.P_callback = NULL;
 1c8:	19 86       	std	Y+9, r1	; 0x09
 1ca:	18 86       	std	Y+8, r1	; 0x08
	#ifdef USING_INTERRUPT
	config.ADC_IRQ_enable = ADC_IRQ_ENABLE;
	config.P_callback = ADC_callBack; 
	#endif
	
	MCAL_ADC_init(&config);
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	0e 94 03 02 	call	0x406	; 0x406 <MCAL_ADC_init>
	LCD_INIT();
 1d4:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_INIT>
	
	#ifdef USING_POLLING
	MCAL_ADC_get_results(ADC1, &data, polling_enable);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	66 e7       	ldi	r22, 0x76	; 118
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 3a 02 	call	0x474	; 0x474 <MCAL_ADC_get_results>
	ADC_callBack();
 1e4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_callBack>
	
	#ifdef USING_INTERRUPT
	MCAL_ADC_get_results(ADC1, &data, polling_disable);
	#endif
	
 1e8:	29 96       	adiw	r28, 0x09	; 9
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <LCD_KICK>:
#include "lcd.h"
#include <stdio.h>

void LCD_KICK()
{
	LCD_CTRL &= ~(1<<E_PIN);
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	87 7f       	andi	r24, 0xF7	; 247
 1fe:	88 bb       	out	0x18, r24	; 24
 200:	83 ed       	ldi	r24, 0xD3	; 211
 202:	90 e3       	ldi	r25, 0x30	; 48
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_KICK+0xa>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_KICK+0x10>
 20a:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |=(1<<E_PIN);
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret

00000214 <LCD_ISBUSY>:
}

void LCD_ISBUSY()
{
	DataDir_LCD_PORT &= ~(0xFF<<DATA_SHIFT);
 214:	8a b3       	in	r24, 0x1a	; 26
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL		 |=  (1 << RW_PIN);
 21a:	88 b3       	in	r24, 0x18	; 24
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL		 &= ~(1 << RS_PIN);
 220:	88 b3       	in	r24, 0x18	; 24
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 226:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_KICK>
	#ifdef EIGHT_BIT_MODE
		DataDir_LCD_PORT |=  (0xFF<<DATA_SHIFT);
	#endif
	
	#ifdef FOUR_BIT_MODE
	DataDir_LCD_PORT |=  (0xF0<<DATA_SHIFT);
 22a:	8a b3       	in	r24, 0x1a	; 26
 22c:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	LCD_CTRL		 &= ~(1 << RW_PIN);
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	8b 7f       	andi	r24, 0xFB	; 251
 232:	88 bb       	out	0x18, r24	; 24
 234:	08 95       	ret

00000236 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
}

void LCD_WRITE_COMMAND(unsigned char command)
{
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
		LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
		//LCD_ISBUSY();
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
 23a:	8b b3       	in	r24, 0x1b	; 27
 23c:	8f 70       	andi	r24, 0x0F	; 15
 23e:	9c 2f       	mov	r25, r28
 240:	90 7f       	andi	r25, 0xF0	; 240
 242:	89 2b       	or	r24, r25
 244:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
 246:	88 b3       	in	r24, 0x18	; 24
 248:	89 7f       	andi	r24, 0xF9	; 249
 24a:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 24c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_KICK>
 250:	87 ea       	ldi	r24, 0xA7	; 167
 252:	91 e6       	ldi	r25, 0x61	; 97
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD_WRITE_COMMAND+0x1e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_WRITE_COMMAND+0x24>
 25a:	00 00       	nop
		
		_delay_ms(100);
		LCD_PORT = (LCD_PORT & 0x0F) | (command << DATA_SHIFT);
 25c:	2b b3       	in	r18, 0x1b	; 27
 25e:	30 e1       	ldi	r19, 0x10	; 16
 260:	c3 9f       	mul	r28, r19
 262:	c0 01       	movw	r24, r0
 264:	11 24       	eor	r1, r1
 266:	92 2f       	mov	r25, r18
 268:	9f 70       	andi	r25, 0x0F	; 15
 26a:	89 2b       	or	r24, r25
 26c:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
 26e:	88 b3       	in	r24, 0x18	; 24
 270:	89 7f       	andi	r24, 0xF9	; 249
 272:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 274:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_KICK>
	#endif
		
}
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character)
{
 27c:	cf 93       	push	r28
 27e:	c8 2f       	mov	r28, r24
		LCD_CTRL &= ~ (1<<RW_PIN);
		LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 280:	8b b3       	in	r24, 0x1b	; 27
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	9c 2f       	mov	r25, r28
 286:	90 7f       	andi	r25, 0xF0	; 240
 288:	89 2b       	or	r24, r25
 28a:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
 292:	88 b3       	in	r24, 0x18	; 24
 294:	8b 7f       	andi	r24, 0xFB	; 251
 296:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 298:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_KICK>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 29c:	2b b3       	in	r18, 0x1b	; 27
 29e:	30 e1       	ldi	r19, 0x10	; 16
 2a0:	c3 9f       	mul	r28, r19
 2a2:	c0 01       	movw	r24, r0
 2a4:	11 24       	eor	r1, r1
 2a6:	92 2f       	mov	r25, r18
 2a8:	9f 70       	andi	r25, 0x0F	; 15
 2aa:	89 2b       	or	r24, r25
 2ac:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
 2b4:	88 b3       	in	r24, 0x18	; 24
 2b6:	8b 7f       	andi	r24, 0xFB	; 251
 2b8:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 2ba:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_KICK>
	#endif
}
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <LCD_CLEAR_SCREEN>:
		LCD_WRITE_STRING((uint8_t*)str);
}

void LCD_CLEAR_SCREEN()
{
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
 2c8:	08 95       	ret

000002ca <LCD_INIT>:
 2ca:	87 e8       	ldi	r24, 0x87	; 135
 2cc:	93 e1       	ldi	r25, 0x13	; 19
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_INIT+0x4>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_INIT+0xa>
 2d4:	00 00       	nop
}

void LCD_INIT()
{
	_delay_ms(20);
	LCD_ISBUSY();
 2d6:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_ISBUSY>
	DataDir_LCD_CTRL |=  ((1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN)); 
 2da:	87 b3       	in	r24, 0x17	; 23
 2dc:	8e 60       	ori	r24, 0x0E	; 14
 2de:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL		 &= ~((1 << RW_PIN) | (1 << RS_PIN) | (1 << E_PIN));
 2e0:	88 b3       	in	r24, 0x18	; 24
 2e2:	81 7f       	andi	r24, 0xF1	; 241
 2e4:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 2e6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_KICK>
 2ea:	85 ea       	ldi	r24, 0xA5	; 165
 2ec:	9e e0       	ldi	r25, 0x0E	; 14
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_INIT+0x24>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_INIT+0x2a>
 2f4:	00 00       	nop
	_delay_ms(15);
	LCD_CLEAR_SCREEN();
 2f6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_CLEAR_SCREEN>
		DataDir_LCD_PORT |=  (0xFF<<DATA_SHIFT);
		LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
	#endif

	#ifdef FOUR_BIT_MODE
		DataDir_LCD_PORT |=  (0xF0<<DATA_SHIFT);
 2fa:	8a b3       	in	r24, 0x1a	; 26
 2fc:	8a bb       	out	0x1a, r24	; 26
		LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES_1st_CMD);
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
 304:	88 e2       	ldi	r24, 0x28	; 40
 306:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
 31c:	08 95       	ret

0000031e <LCD_GOTO_XY>:
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
	if (line == 0)
 31e:	81 11       	cpse	r24, r1
 320:	07 c0       	rjmp	.+14     	; 0x330 <LCD_GOTO_XY+0x12>
	{
		if (position < 16 && position >= 0)
 322:	60 31       	cpi	r22, 0x10	; 16
 324:	68 f4       	brcc	.+26     	; 0x340 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	86 0f       	add	r24, r22
 32a:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
 32e:	08 95       	ret
		}
	}
	else if (line == 1)
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	31 f4       	brne	.+12     	; 0x340 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
 334:	60 31       	cpi	r22, 0x10	; 16
 336:	20 f4       	brcc	.+8      	; 0x340 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 338:	80 ec       	ldi	r24, 0xC0	; 192
 33a:	86 0f       	add	r24, r22
 33c:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
 340:	08 95       	ret

00000342 <LCD_WRITE_STRING>:
		LCD_KICK();
	#endif
}

void LCD_WRITE_STRING(char* string)
{
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
	volatile static char counter = 0;
	while(*string != 0)
 34c:	21 c0       	rjmp	.+66     	; 0x390 <LCD_WRITE_STRING+0x4e>
	{		
		if(counter == 16)
 34e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 352:	80 31       	cpi	r24, 0x10	; 16
 354:	21 f4       	brne	.+8      	; 0x35e <LCD_WRITE_STRING+0x1c>
		{
			LCD_GOTO_XY(LCD_SECOND_LINE, LCD_FIRST_COLUMN);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_GOTO_XY>
		}
		
		LCD_WRITE_CHAR(*string ++);
 35e:	8e 01       	movw	r16, r28
 360:	0f 5f       	subi	r16, 0xFF	; 255
 362:	1f 4f       	sbci	r17, 0xFF	; 255
 364:	88 81       	ld	r24, Y
 366:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_WRITE_CHAR>
		counter++;
 36a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 36e:	8f 5f       	subi	r24, 0xFF	; 255
 370:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		
		if(counter > 31)
 374:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 378:	80 32       	cpi	r24, 0x20	; 32
 37a:	48 f0       	brcs	.+18     	; 0x38e <LCD_WRITE_STRING+0x4c>
		{
			LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_WRITE_COMMAND>
			LCD_GOTO_XY(LCD_FIRST_LINE, LCD_FIRST_COLUMN);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_GOTO_XY>
			counter = 0 ;
 38a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
		LCD_KICK();
	#endif
}

void LCD_WRITE_STRING(char* string)
{
 38e:	e8 01       	movw	r28, r16
	volatile static char counter = 0;
	while(*string != 0)
 390:	88 81       	ld	r24, Y
 392:	81 11       	cpse	r24, r1
 394:	dc cf       	rjmp	.-72     	; 0x34e <LCD_WRITE_STRING+0xc>
			LCD_GOTO_XY(LCD_FIRST_LINE, LCD_FIRST_COLUMN);
			counter = 0 ;
		}
		
	}
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <LCD_WRITE_Intger_Number>:

void LCD_WRITE_Intger_Number( uint32_t Intger_Number )
{
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	27 97       	sbiw	r28, 0x07	; 7
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
		char str[7];
		sprintf(str,"%d",Intger_Number);     // Adjust the formatting to your liking
 3b8:	9f 93       	push	r25
 3ba:	8f 93       	push	r24
 3bc:	7f 93       	push	r23
 3be:	6f 93       	push	r22
 3c0:	88 e6       	ldi	r24, 0x68	; 104
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9f 93       	push	r25
 3c6:	8f 93       	push	r24
 3c8:	8e 01       	movw	r16, r28
 3ca:	0f 5f       	subi	r16, 0xFF	; 255
 3cc:	1f 4f       	sbci	r17, 0xFF	; 255
 3ce:	1f 93       	push	r17
 3d0:	0f 93       	push	r16
 3d2:	0e 94 30 03 	call	0x660	; 0x660 <sprintf>
		LCD_WRITE_STRING((uint8_t*)str);
 3d6:	c8 01       	movw	r24, r16
 3d8:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_WRITE_STRING>
}
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	27 96       	adiw	r28, 0x07	; 7
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <main>:
void lab2(void);

int main(void){
	
	
	ADC_progress_bar_app();
 3fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <ADC_progress_bar_app>
	
	
	return 0;
    
}
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	08 95       	ret

00000406 <MCAL_ADC_init>:
}

void MCAL_ADC_deinit(void){
	ADMUX  = 0x00;
	ADCSRA = 0x00;
	SFIOR &= ~((1<<ADTS0) | (1<<ADTS1) | (1<<ADTS2));
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	ec 01       	movw	r28, r24
 40c:	89 e0       	ldi	r24, 0x09	; 9
 40e:	fe 01       	movw	r30, r28
 410:	a2 e8       	ldi	r26, 0x82	; 130
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	01 90       	ld	r0, Z+
 416:	0d 92       	st	X+, r0
 418:	8a 95       	dec	r24
 41a:	e1 f7       	brne	.-8      	; 0x414 <MCAL_ADC_init+0xe>
 41c:	96 b1       	in	r25, 0x06	; 6
 41e:	88 81       	ld	r24, Y
 420:	89 2b       	or	r24, r25
 422:	86 b9       	out	0x06, r24	; 6
 424:	97 b1       	in	r25, 0x07	; 7
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	89 2b       	or	r24, r25
 42a:	87 b9       	out	0x07, r24	; 7
 42c:	97 b1       	in	r25, 0x07	; 7
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	89 2b       	or	r24, r25
 432:	87 b9       	out	0x07, r24	; 7
 434:	96 b1       	in	r25, 0x06	; 6
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	89 2b       	or	r24, r25
 43a:	86 b9       	out	0x06, r24	; 6
 43c:	90 b7       	in	r25, 0x30	; 48
 43e:	8c 81       	ldd	r24, Y+4	; 0x04
 440:	89 2b       	or	r24, r25
 442:	80 bf       	out	0x30, r24	; 48
 444:	96 b1       	in	r25, 0x06	; 6
 446:	8d 81       	ldd	r24, Y+5	; 0x05
 448:	89 2b       	or	r24, r25
 44a:	86 b9       	out	0x06, r24	; 6
 44c:	96 b1       	in	r25, 0x06	; 6
 44e:	8e 81       	ldd	r24, Y+6	; 0x06
 450:	89 2b       	or	r24, r25
 452:	86 b9       	out	0x06, r24	; 6
 454:	8e 81       	ldd	r24, Y+6	; 0x06
 456:	88 30       	cpi	r24, 0x08	; 8
 458:	09 f4       	brne	.+2      	; 0x45c <MCAL_ADC_init+0x56>
 45a:	78 94       	sei
 45c:	86 b1       	in	r24, 0x06	; 6
 45e:	80 68       	ori	r24, 0x80	; 128
 460:	86 b9       	out	0x06, r24	; 6
 462:	88 81       	ld	r24, Y
 464:	81 11       	cpse	r24, r1
 466:	03 c0       	rjmp	.+6      	; 0x46e <MCAL_ADC_init+0x68>
 468:	86 b1       	in	r24, 0x06	; 6
 46a:	80 64       	ori	r24, 0x40	; 64
 46c:	86 b9       	out	0x06, r24	; 6
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <MCAL_ADC_get_results>:
}

void MCAL_ADC_get_results(channel_sel_t channel,uint16_t * data, polling poll){
	
	ADMUX &= ~(0x1f);
 474:	97 b1       	in	r25, 0x07	; 7
 476:	90 7e       	andi	r25, 0xE0	; 224
 478:	97 b9       	out	0x07, r25	; 7
	
	ADMUX |= channel;
 47a:	97 b1       	in	r25, 0x07	; 7
 47c:	98 2b       	or	r25, r24
 47e:	97 b9       	out	0x07, r25	; 7
	CLEAR_BIT(DDRA,channel);
 480:	5a b3       	in	r21, 0x1a	; 26
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	f9 01       	movw	r30, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <MCAL_ADC_get_results+0x1a>
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <MCAL_ADC_get_results+0x16>
 492:	cf 01       	movw	r24, r30
 494:	80 95       	com	r24
 496:	85 23       	and	r24, r21
 498:	8a bb       	out	0x1a, r24	; 26
	
	
	if (G_config.ADC_mode == ADC_MODE_SINGLE_CONVERSION){
 49a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <G_config>
 49e:	80 34       	cpi	r24, 0x40	; 64
 4a0:	19 f4       	brne	.+6      	; 0x4a8 <MCAL_ADC_get_results+0x34>
		SET_BIT(ADCSRA, ADSC);
 4a2:	86 b1       	in	r24, 0x06	; 6
 4a4:	80 64       	ori	r24, 0x40	; 64
 4a6:	86 b9       	out	0x06, r24	; 6
	}
	
	
	if (poll == polling_enable){
 4a8:	41 11       	cpse	r20, r1
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <MCAL_ADC_get_results+0x3c>
		while(!READ_BIT(ADCSRA, ADIF));
 4ac:	34 9b       	sbis	0x06, 4	; 6
 4ae:	fe cf       	rjmp	.-4      	; 0x4ac <MCAL_ADC_get_results+0x38>
	}
	
	if (G_config.ADC_data_repersentation == ADC_DATA_REPRESENTATION_RIGHT_ADJUST){
 4b0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <G_config+0x1>
 4b4:	81 11       	cpse	r24, r1
 4b6:	0b c0       	rjmp	.+22     	; 0x4ce <MCAL_ADC_get_results+0x5a>
		*data = (ADCL | ((ADCH & (0x03)) << 8));
 4b8:	24 b1       	in	r18, 0x04	; 4
 4ba:	85 b1       	in	r24, 0x05	; 5
 4bc:	83 70       	andi	r24, 0x03	; 3
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	98 2f       	mov	r25, r24
 4c2:	88 27       	eor	r24, r24
 4c4:	82 2b       	or	r24, r18
 4c6:	fb 01       	movw	r30, r22
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
 4cc:	0f c0       	rjmp	.+30     	; 0x4ec <MCAL_ADC_get_results+0x78>
	} else {
		*data = (((ADCL & (0xC0)) >> 6) | (ADCH << 2));
 4ce:	24 b1       	in	r18, 0x04	; 4
 4d0:	22 95       	swap	r18
 4d2:	26 95       	lsr	r18
 4d4:	26 95       	lsr	r18
 4d6:	23 70       	andi	r18, 0x03	; 3
 4d8:	85 b1       	in	r24, 0x05	; 5
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	82 2b       	or	r24, r18
 4e6:	fb 01       	movw	r30, r22
 4e8:	91 83       	std	Z+1, r25	; 0x01
 4ea:	80 83       	st	Z, r24
	}
	
	
	CLEAR_BIT(ADCSRA,ADIF);
 4ec:	86 b1       	in	r24, 0x06	; 6
 4ee:	8f 7e       	andi	r24, 0xEF	; 239
 4f0:	86 b9       	out	0x06, r24	; 6
 4f2:	08 95       	ret

000004f4 <__vector_16>:
}


ISR(ADC_vect){
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
	G_config.P_callback();
 516:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <G_config+0x7>
 51a:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <G_config+0x8>
 51e:	09 95       	icall
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <__vector_10>:
	} else {
		OCR0 = 255 - Duty_Cycle;
	}
}

ISR(TIMER0_COMP_vect){
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	2f 93       	push	r18
 54e:	3f 93       	push	r19
 550:	4f 93       	push	r20
 552:	5f 93       	push	r21
 554:	6f 93       	push	r22
 556:	7f 93       	push	r23
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
 55c:	af 93       	push	r26
 55e:	bf 93       	push	r27
 560:	ef 93       	push	r30
 562:	ff 93       	push	r31
	G_callback_func();
 564:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <G_callback_func>
 568:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <G_callback_func+0x1>
 56c:	09 95       	icall
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_11>:

ISR(TIMER0_OVF_vect){
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
	overflowCounter++;
 5b2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <overflowCounter>
 5b6:	8f 5f       	subi	r24, 0xFF	; 255
 5b8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <overflowCounter>
	G_callback_func();
 5bc:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <G_callback_func>
 5c0:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <G_callback_func+0x1>
 5c4:	09 95       	icall
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__udivmodsi4>:
 5e8:	a1 e2       	ldi	r26, 0x21	; 33
 5ea:	1a 2e       	mov	r1, r26
 5ec:	aa 1b       	sub	r26, r26
 5ee:	bb 1b       	sub	r27, r27
 5f0:	fd 01       	movw	r30, r26
 5f2:	0d c0       	rjmp	.+26     	; 0x60e <__udivmodsi4_ep>

000005f4 <__udivmodsi4_loop>:
 5f4:	aa 1f       	adc	r26, r26
 5f6:	bb 1f       	adc	r27, r27
 5f8:	ee 1f       	adc	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	a2 17       	cp	r26, r18
 5fe:	b3 07       	cpc	r27, r19
 600:	e4 07       	cpc	r30, r20
 602:	f5 07       	cpc	r31, r21
 604:	20 f0       	brcs	.+8      	; 0x60e <__udivmodsi4_ep>
 606:	a2 1b       	sub	r26, r18
 608:	b3 0b       	sbc	r27, r19
 60a:	e4 0b       	sbc	r30, r20
 60c:	f5 0b       	sbc	r31, r21

0000060e <__udivmodsi4_ep>:
 60e:	66 1f       	adc	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	1a 94       	dec	r1
 618:	69 f7       	brne	.-38     	; 0x5f4 <__udivmodsi4_loop>
 61a:	60 95       	com	r22
 61c:	70 95       	com	r23
 61e:	80 95       	com	r24
 620:	90 95       	com	r25
 622:	9b 01       	movw	r18, r22
 624:	ac 01       	movw	r20, r24
 626:	bd 01       	movw	r22, r26
 628:	cf 01       	movw	r24, r30
 62a:	08 95       	ret

0000062c <__muluhisi3>:
 62c:	0e 94 21 03 	call	0x642	; 0x642 <__umulhisi3>
 630:	a5 9f       	mul	r26, r21
 632:	90 0d       	add	r25, r0
 634:	b4 9f       	mul	r27, r20
 636:	90 0d       	add	r25, r0
 638:	a4 9f       	mul	r26, r20
 63a:	80 0d       	add	r24, r0
 63c:	91 1d       	adc	r25, r1
 63e:	11 24       	eor	r1, r1
 640:	08 95       	ret

00000642 <__umulhisi3>:
 642:	a2 9f       	mul	r26, r18
 644:	b0 01       	movw	r22, r0
 646:	b3 9f       	mul	r27, r19
 648:	c0 01       	movw	r24, r0
 64a:	a3 9f       	mul	r26, r19
 64c:	70 0d       	add	r23, r0
 64e:	81 1d       	adc	r24, r1
 650:	11 24       	eor	r1, r1
 652:	91 1d       	adc	r25, r1
 654:	b2 9f       	mul	r27, r18
 656:	70 0d       	add	r23, r0
 658:	81 1d       	adc	r24, r1
 65a:	11 24       	eor	r1, r1
 65c:	91 1d       	adc	r25, r1
 65e:	08 95       	ret

00000660 <sprintf>:
 660:	ae e0       	ldi	r26, 0x0E	; 14
 662:	b0 e0       	ldi	r27, 0x00	; 0
 664:	e6 e3       	ldi	r30, 0x36	; 54
 666:	f3 e0       	ldi	r31, 0x03	; 3
 668:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__prologue_saves__+0x1c>
 66c:	0d 89       	ldd	r16, Y+21	; 0x15
 66e:	1e 89       	ldd	r17, Y+22	; 0x16
 670:	86 e0       	ldi	r24, 0x06	; 6
 672:	8c 83       	std	Y+4, r24	; 0x04
 674:	1a 83       	std	Y+2, r17	; 0x02
 676:	09 83       	std	Y+1, r16	; 0x01
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	9f e7       	ldi	r25, 0x7F	; 127
 67c:	9e 83       	std	Y+6, r25	; 0x06
 67e:	8d 83       	std	Y+5, r24	; 0x05
 680:	ae 01       	movw	r20, r28
 682:	47 5e       	subi	r20, 0xE7	; 231
 684:	5f 4f       	sbci	r21, 0xFF	; 255
 686:	6f 89       	ldd	r22, Y+23	; 0x17
 688:	78 8d       	ldd	r23, Y+24	; 0x18
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <vfprintf>
 692:	ef 81       	ldd	r30, Y+7	; 0x07
 694:	f8 85       	ldd	r31, Y+8	; 0x08
 696:	e0 0f       	add	r30, r16
 698:	f1 1f       	adc	r31, r17
 69a:	10 82       	st	Z, r1
 69c:	2e 96       	adiw	r28, 0x0e	; 14
 69e:	e4 e0       	ldi	r30, 0x04	; 4
 6a0:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__epilogue_restores__+0x1c>

000006a4 <vfprintf>:
 6a4:	ab e0       	ldi	r26, 0x0B	; 11
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e8 e5       	ldi	r30, 0x58	; 88
 6aa:	f3 e0       	ldi	r31, 0x03	; 3
 6ac:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__prologue_saves__>
 6b0:	6c 01       	movw	r12, r24
 6b2:	7b 01       	movw	r14, r22
 6b4:	8a 01       	movw	r16, r20
 6b6:	fc 01       	movw	r30, r24
 6b8:	17 82       	std	Z+7, r1	; 0x07
 6ba:	16 82       	std	Z+6, r1	; 0x06
 6bc:	83 81       	ldd	r24, Z+3	; 0x03
 6be:	81 ff       	sbrs	r24, 1
 6c0:	cc c1       	rjmp	.+920    	; 0xa5a <__stack+0x1fb>
 6c2:	ce 01       	movw	r24, r28
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	3c 01       	movw	r6, r24
 6c8:	f6 01       	movw	r30, r12
 6ca:	93 81       	ldd	r25, Z+3	; 0x03
 6cc:	f7 01       	movw	r30, r14
 6ce:	93 fd       	sbrc	r25, 3
 6d0:	85 91       	lpm	r24, Z+
 6d2:	93 ff       	sbrs	r25, 3
 6d4:	81 91       	ld	r24, Z+
 6d6:	7f 01       	movw	r14, r30
 6d8:	88 23       	and	r24, r24
 6da:	09 f4       	brne	.+2      	; 0x6de <vfprintf+0x3a>
 6dc:	ba c1       	rjmp	.+884    	; 0xa52 <__stack+0x1f3>
 6de:	85 32       	cpi	r24, 0x25	; 37
 6e0:	39 f4       	brne	.+14     	; 0x6f0 <vfprintf+0x4c>
 6e2:	93 fd       	sbrc	r25, 3
 6e4:	85 91       	lpm	r24, Z+
 6e6:	93 ff       	sbrs	r25, 3
 6e8:	81 91       	ld	r24, Z+
 6ea:	7f 01       	movw	r14, r30
 6ec:	85 32       	cpi	r24, 0x25	; 37
 6ee:	29 f4       	brne	.+10     	; 0x6fa <vfprintf+0x56>
 6f0:	b6 01       	movw	r22, r12
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 6f8:	e7 cf       	rjmp	.-50     	; 0x6c8 <vfprintf+0x24>
 6fa:	91 2c       	mov	r9, r1
 6fc:	21 2c       	mov	r2, r1
 6fe:	31 2c       	mov	r3, r1
 700:	ff e1       	ldi	r31, 0x1F	; 31
 702:	f3 15       	cp	r31, r3
 704:	d8 f0       	brcs	.+54     	; 0x73c <vfprintf+0x98>
 706:	8b 32       	cpi	r24, 0x2B	; 43
 708:	79 f0       	breq	.+30     	; 0x728 <vfprintf+0x84>
 70a:	38 f4       	brcc	.+14     	; 0x71a <vfprintf+0x76>
 70c:	80 32       	cpi	r24, 0x20	; 32
 70e:	79 f0       	breq	.+30     	; 0x72e <vfprintf+0x8a>
 710:	83 32       	cpi	r24, 0x23	; 35
 712:	a1 f4       	brne	.+40     	; 0x73c <vfprintf+0x98>
 714:	23 2d       	mov	r18, r3
 716:	20 61       	ori	r18, 0x10	; 16
 718:	1d c0       	rjmp	.+58     	; 0x754 <vfprintf+0xb0>
 71a:	8d 32       	cpi	r24, 0x2D	; 45
 71c:	61 f0       	breq	.+24     	; 0x736 <vfprintf+0x92>
 71e:	80 33       	cpi	r24, 0x30	; 48
 720:	69 f4       	brne	.+26     	; 0x73c <vfprintf+0x98>
 722:	23 2d       	mov	r18, r3
 724:	21 60       	ori	r18, 0x01	; 1
 726:	16 c0       	rjmp	.+44     	; 0x754 <vfprintf+0xb0>
 728:	83 2d       	mov	r24, r3
 72a:	82 60       	ori	r24, 0x02	; 2
 72c:	38 2e       	mov	r3, r24
 72e:	e3 2d       	mov	r30, r3
 730:	e4 60       	ori	r30, 0x04	; 4
 732:	3e 2e       	mov	r3, r30
 734:	2a c0       	rjmp	.+84     	; 0x78a <vfprintf+0xe6>
 736:	f3 2d       	mov	r31, r3
 738:	f8 60       	ori	r31, 0x08	; 8
 73a:	1d c0       	rjmp	.+58     	; 0x776 <vfprintf+0xd2>
 73c:	37 fc       	sbrc	r3, 7
 73e:	2d c0       	rjmp	.+90     	; 0x79a <vfprintf+0xf6>
 740:	20 ed       	ldi	r18, 0xD0	; 208
 742:	28 0f       	add	r18, r24
 744:	2a 30       	cpi	r18, 0x0A	; 10
 746:	40 f0       	brcs	.+16     	; 0x758 <vfprintf+0xb4>
 748:	8e 32       	cpi	r24, 0x2E	; 46
 74a:	b9 f4       	brne	.+46     	; 0x77a <vfprintf+0xd6>
 74c:	36 fc       	sbrc	r3, 6
 74e:	81 c1       	rjmp	.+770    	; 0xa52 <__stack+0x1f3>
 750:	23 2d       	mov	r18, r3
 752:	20 64       	ori	r18, 0x40	; 64
 754:	32 2e       	mov	r3, r18
 756:	19 c0       	rjmp	.+50     	; 0x78a <vfprintf+0xe6>
 758:	36 fe       	sbrs	r3, 6
 75a:	06 c0       	rjmp	.+12     	; 0x768 <vfprintf+0xc4>
 75c:	8a e0       	ldi	r24, 0x0A	; 10
 75e:	98 9e       	mul	r9, r24
 760:	20 0d       	add	r18, r0
 762:	11 24       	eor	r1, r1
 764:	92 2e       	mov	r9, r18
 766:	11 c0       	rjmp	.+34     	; 0x78a <vfprintf+0xe6>
 768:	ea e0       	ldi	r30, 0x0A	; 10
 76a:	2e 9e       	mul	r2, r30
 76c:	20 0d       	add	r18, r0
 76e:	11 24       	eor	r1, r1
 770:	22 2e       	mov	r2, r18
 772:	f3 2d       	mov	r31, r3
 774:	f0 62       	ori	r31, 0x20	; 32
 776:	3f 2e       	mov	r3, r31
 778:	08 c0       	rjmp	.+16     	; 0x78a <vfprintf+0xe6>
 77a:	8c 36       	cpi	r24, 0x6C	; 108
 77c:	21 f4       	brne	.+8      	; 0x786 <vfprintf+0xe2>
 77e:	83 2d       	mov	r24, r3
 780:	80 68       	ori	r24, 0x80	; 128
 782:	38 2e       	mov	r3, r24
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0xe6>
 786:	88 36       	cpi	r24, 0x68	; 104
 788:	41 f4       	brne	.+16     	; 0x79a <vfprintf+0xf6>
 78a:	f7 01       	movw	r30, r14
 78c:	93 fd       	sbrc	r25, 3
 78e:	85 91       	lpm	r24, Z+
 790:	93 ff       	sbrs	r25, 3
 792:	81 91       	ld	r24, Z+
 794:	7f 01       	movw	r14, r30
 796:	81 11       	cpse	r24, r1
 798:	b3 cf       	rjmp	.-154    	; 0x700 <vfprintf+0x5c>
 79a:	98 2f       	mov	r25, r24
 79c:	9f 7d       	andi	r25, 0xDF	; 223
 79e:	95 54       	subi	r25, 0x45	; 69
 7a0:	93 30       	cpi	r25, 0x03	; 3
 7a2:	28 f4       	brcc	.+10     	; 0x7ae <vfprintf+0x10a>
 7a4:	0c 5f       	subi	r16, 0xFC	; 252
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	9f e3       	ldi	r25, 0x3F	; 63
 7aa:	99 83       	std	Y+1, r25	; 0x01
 7ac:	0d c0       	rjmp	.+26     	; 0x7c8 <vfprintf+0x124>
 7ae:	83 36       	cpi	r24, 0x63	; 99
 7b0:	31 f0       	breq	.+12     	; 0x7be <vfprintf+0x11a>
 7b2:	83 37       	cpi	r24, 0x73	; 115
 7b4:	71 f0       	breq	.+28     	; 0x7d2 <vfprintf+0x12e>
 7b6:	83 35       	cpi	r24, 0x53	; 83
 7b8:	09 f0       	breq	.+2      	; 0x7bc <vfprintf+0x118>
 7ba:	59 c0       	rjmp	.+178    	; 0x86e <__stack+0xf>
 7bc:	21 c0       	rjmp	.+66     	; 0x800 <__DATA_REGION_LENGTH__>
 7be:	f8 01       	movw	r30, r16
 7c0:	80 81       	ld	r24, Z
 7c2:	89 83       	std	Y+1, r24	; 0x01
 7c4:	0e 5f       	subi	r16, 0xFE	; 254
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	88 24       	eor	r8, r8
 7ca:	83 94       	inc	r8
 7cc:	91 2c       	mov	r9, r1
 7ce:	53 01       	movw	r10, r6
 7d0:	13 c0       	rjmp	.+38     	; 0x7f8 <vfprintf+0x154>
 7d2:	28 01       	movw	r4, r16
 7d4:	f2 e0       	ldi	r31, 0x02	; 2
 7d6:	4f 0e       	add	r4, r31
 7d8:	51 1c       	adc	r5, r1
 7da:	f8 01       	movw	r30, r16
 7dc:	a0 80       	ld	r10, Z
 7de:	b1 80       	ldd	r11, Z+1	; 0x01
 7e0:	36 fe       	sbrs	r3, 6
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <vfprintf+0x146>
 7e4:	69 2d       	mov	r22, r9
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <vfprintf+0x14a>
 7ea:	6f ef       	ldi	r22, 0xFF	; 255
 7ec:	7f ef       	ldi	r23, 0xFF	; 255
 7ee:	c5 01       	movw	r24, r10
 7f0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <strnlen>
 7f4:	4c 01       	movw	r8, r24
 7f6:	82 01       	movw	r16, r4
 7f8:	f3 2d       	mov	r31, r3
 7fa:	ff 77       	andi	r31, 0x7F	; 127
 7fc:	3f 2e       	mov	r3, r31
 7fe:	16 c0       	rjmp	.+44     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 800:	28 01       	movw	r4, r16
 802:	22 e0       	ldi	r18, 0x02	; 2
 804:	42 0e       	add	r4, r18
 806:	51 1c       	adc	r5, r1
 808:	f8 01       	movw	r30, r16
 80a:	a0 80       	ld	r10, Z
 80c:	b1 80       	ldd	r11, Z+1	; 0x01
 80e:	36 fe       	sbrs	r3, 6
 810:	03 c0       	rjmp	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 812:	69 2d       	mov	r22, r9
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	6f ef       	ldi	r22, 0xFF	; 255
 81a:	7f ef       	ldi	r23, 0xFF	; 255
 81c:	c5 01       	movw	r24, r10
 81e:	0e 94 33 05 	call	0xa66	; 0xa66 <strnlen_P>
 822:	4c 01       	movw	r8, r24
 824:	f3 2d       	mov	r31, r3
 826:	f0 68       	ori	r31, 0x80	; 128
 828:	3f 2e       	mov	r3, r31
 82a:	82 01       	movw	r16, r4
 82c:	33 fc       	sbrc	r3, 3
 82e:	1b c0       	rjmp	.+54     	; 0x866 <__stack+0x7>
 830:	82 2d       	mov	r24, r2
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	88 16       	cp	r8, r24
 836:	99 06       	cpc	r9, r25
 838:	b0 f4       	brcc	.+44     	; 0x866 <__stack+0x7>
 83a:	b6 01       	movw	r22, r12
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 844:	2a 94       	dec	r2
 846:	f4 cf       	rjmp	.-24     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 848:	f5 01       	movw	r30, r10
 84a:	37 fc       	sbrc	r3, 7
 84c:	85 91       	lpm	r24, Z+
 84e:	37 fe       	sbrs	r3, 7
 850:	81 91       	ld	r24, Z+
 852:	5f 01       	movw	r10, r30
 854:	b6 01       	movw	r22, r12
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 85c:	21 10       	cpse	r2, r1
 85e:	2a 94       	dec	r2
 860:	21 e0       	ldi	r18, 0x01	; 1
 862:	82 1a       	sub	r8, r18
 864:	91 08       	sbc	r9, r1
 866:	81 14       	cp	r8, r1
 868:	91 04       	cpc	r9, r1
 86a:	71 f7       	brne	.-36     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 86c:	e8 c0       	rjmp	.+464    	; 0xa3e <__stack+0x1df>
 86e:	84 36       	cpi	r24, 0x64	; 100
 870:	11 f0       	breq	.+4      	; 0x876 <__stack+0x17>
 872:	89 36       	cpi	r24, 0x69	; 105
 874:	41 f5       	brne	.+80     	; 0x8c6 <__stack+0x67>
 876:	f8 01       	movw	r30, r16
 878:	37 fe       	sbrs	r3, 7
 87a:	07 c0       	rjmp	.+14     	; 0x88a <__stack+0x2b>
 87c:	60 81       	ld	r22, Z
 87e:	71 81       	ldd	r23, Z+1	; 0x01
 880:	82 81       	ldd	r24, Z+2	; 0x02
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	08 c0       	rjmp	.+16     	; 0x89a <__stack+0x3b>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	07 2e       	mov	r0, r23
 890:	00 0c       	add	r0, r0
 892:	88 0b       	sbc	r24, r24
 894:	99 0b       	sbc	r25, r25
 896:	0e 5f       	subi	r16, 0xFE	; 254
 898:	1f 4f       	sbci	r17, 0xFF	; 255
 89a:	f3 2d       	mov	r31, r3
 89c:	ff 76       	andi	r31, 0x6F	; 111
 89e:	3f 2e       	mov	r3, r31
 8a0:	97 ff       	sbrs	r25, 7
 8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <__stack+0x57>
 8a4:	90 95       	com	r25
 8a6:	80 95       	com	r24
 8a8:	70 95       	com	r23
 8aa:	61 95       	neg	r22
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	f0 68       	ori	r31, 0x80	; 128
 8b4:	3f 2e       	mov	r3, r31
 8b6:	2a e0       	ldi	r18, 0x0A	; 10
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	a3 01       	movw	r20, r6
 8bc:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 8c0:	88 2e       	mov	r8, r24
 8c2:	86 18       	sub	r8, r6
 8c4:	45 c0       	rjmp	.+138    	; 0x950 <__stack+0xf1>
 8c6:	85 37       	cpi	r24, 0x75	; 117
 8c8:	31 f4       	brne	.+12     	; 0x8d6 <__stack+0x77>
 8ca:	23 2d       	mov	r18, r3
 8cc:	2f 7e       	andi	r18, 0xEF	; 239
 8ce:	b2 2e       	mov	r11, r18
 8d0:	2a e0       	ldi	r18, 0x0A	; 10
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	25 c0       	rjmp	.+74     	; 0x920 <__stack+0xc1>
 8d6:	93 2d       	mov	r25, r3
 8d8:	99 7f       	andi	r25, 0xF9	; 249
 8da:	b9 2e       	mov	r11, r25
 8dc:	8f 36       	cpi	r24, 0x6F	; 111
 8de:	c1 f0       	breq	.+48     	; 0x910 <__stack+0xb1>
 8e0:	18 f4       	brcc	.+6      	; 0x8e8 <__stack+0x89>
 8e2:	88 35       	cpi	r24, 0x58	; 88
 8e4:	79 f0       	breq	.+30     	; 0x904 <__stack+0xa5>
 8e6:	b5 c0       	rjmp	.+362    	; 0xa52 <__stack+0x1f3>
 8e8:	80 37       	cpi	r24, 0x70	; 112
 8ea:	19 f0       	breq	.+6      	; 0x8f2 <__stack+0x93>
 8ec:	88 37       	cpi	r24, 0x78	; 120
 8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
 8f0:	b0 c0       	rjmp	.+352    	; 0xa52 <__stack+0x1f3>
 8f2:	e9 2f       	mov	r30, r25
 8f4:	e0 61       	ori	r30, 0x10	; 16
 8f6:	be 2e       	mov	r11, r30
 8f8:	b4 fe       	sbrs	r11, 4
 8fa:	0d c0       	rjmp	.+26     	; 0x916 <__stack+0xb7>
 8fc:	fb 2d       	mov	r31, r11
 8fe:	f4 60       	ori	r31, 0x04	; 4
 900:	bf 2e       	mov	r11, r31
 902:	09 c0       	rjmp	.+18     	; 0x916 <__stack+0xb7>
 904:	34 fe       	sbrs	r3, 4
 906:	0a c0       	rjmp	.+20     	; 0x91c <__stack+0xbd>
 908:	29 2f       	mov	r18, r25
 90a:	26 60       	ori	r18, 0x06	; 6
 90c:	b2 2e       	mov	r11, r18
 90e:	06 c0       	rjmp	.+12     	; 0x91c <__stack+0xbd>
 910:	28 e0       	ldi	r18, 0x08	; 8
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	05 c0       	rjmp	.+10     	; 0x920 <__stack+0xc1>
 916:	20 e1       	ldi	r18, 0x10	; 16
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
 91c:	20 e1       	ldi	r18, 0x10	; 16
 91e:	32 e0       	ldi	r19, 0x02	; 2
 920:	f8 01       	movw	r30, r16
 922:	b7 fe       	sbrs	r11, 7
 924:	07 c0       	rjmp	.+14     	; 0x934 <__stack+0xd5>
 926:	60 81       	ld	r22, Z
 928:	71 81       	ldd	r23, Z+1	; 0x01
 92a:	82 81       	ldd	r24, Z+2	; 0x02
 92c:	93 81       	ldd	r25, Z+3	; 0x03
 92e:	0c 5f       	subi	r16, 0xFC	; 252
 930:	1f 4f       	sbci	r17, 0xFF	; 255
 932:	06 c0       	rjmp	.+12     	; 0x940 <__stack+0xe1>
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 5f       	subi	r16, 0xFE	; 254
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	a3 01       	movw	r20, r6
 942:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 946:	88 2e       	mov	r8, r24
 948:	86 18       	sub	r8, r6
 94a:	fb 2d       	mov	r31, r11
 94c:	ff 77       	andi	r31, 0x7F	; 127
 94e:	3f 2e       	mov	r3, r31
 950:	36 fe       	sbrs	r3, 6
 952:	0d c0       	rjmp	.+26     	; 0x96e <__stack+0x10f>
 954:	23 2d       	mov	r18, r3
 956:	2e 7f       	andi	r18, 0xFE	; 254
 958:	a2 2e       	mov	r10, r18
 95a:	89 14       	cp	r8, r9
 95c:	58 f4       	brcc	.+22     	; 0x974 <__stack+0x115>
 95e:	34 fe       	sbrs	r3, 4
 960:	0b c0       	rjmp	.+22     	; 0x978 <__stack+0x119>
 962:	32 fc       	sbrc	r3, 2
 964:	09 c0       	rjmp	.+18     	; 0x978 <__stack+0x119>
 966:	83 2d       	mov	r24, r3
 968:	8e 7e       	andi	r24, 0xEE	; 238
 96a:	a8 2e       	mov	r10, r24
 96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x119>
 96e:	b8 2c       	mov	r11, r8
 970:	a3 2c       	mov	r10, r3
 972:	03 c0       	rjmp	.+6      	; 0x97a <__stack+0x11b>
 974:	b8 2c       	mov	r11, r8
 976:	01 c0       	rjmp	.+2      	; 0x97a <__stack+0x11b>
 978:	b9 2c       	mov	r11, r9
 97a:	a4 fe       	sbrs	r10, 4
 97c:	0f c0       	rjmp	.+30     	; 0x99c <__stack+0x13d>
 97e:	fe 01       	movw	r30, r28
 980:	e8 0d       	add	r30, r8
 982:	f1 1d       	adc	r31, r1
 984:	80 81       	ld	r24, Z
 986:	80 33       	cpi	r24, 0x30	; 48
 988:	21 f4       	brne	.+8      	; 0x992 <__stack+0x133>
 98a:	9a 2d       	mov	r25, r10
 98c:	99 7e       	andi	r25, 0xE9	; 233
 98e:	a9 2e       	mov	r10, r25
 990:	09 c0       	rjmp	.+18     	; 0x9a4 <__stack+0x145>
 992:	a2 fe       	sbrs	r10, 2
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <__stack+0x143>
 996:	b3 94       	inc	r11
 998:	b3 94       	inc	r11
 99a:	04 c0       	rjmp	.+8      	; 0x9a4 <__stack+0x145>
 99c:	8a 2d       	mov	r24, r10
 99e:	86 78       	andi	r24, 0x86	; 134
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <__stack+0x145>
 9a2:	b3 94       	inc	r11
 9a4:	a3 fc       	sbrc	r10, 3
 9a6:	11 c0       	rjmp	.+34     	; 0x9ca <__stack+0x16b>
 9a8:	a0 fe       	sbrs	r10, 0
 9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <__stack+0x159>
 9ac:	b2 14       	cp	r11, r2
 9ae:	88 f4       	brcc	.+34     	; 0x9d2 <__stack+0x173>
 9b0:	28 0c       	add	r2, r8
 9b2:	92 2c       	mov	r9, r2
 9b4:	9b 18       	sub	r9, r11
 9b6:	0e c0       	rjmp	.+28     	; 0x9d4 <__stack+0x175>
 9b8:	b2 14       	cp	r11, r2
 9ba:	60 f4       	brcc	.+24     	; 0x9d4 <__stack+0x175>
 9bc:	b6 01       	movw	r22, r12
 9be:	80 e2       	ldi	r24, 0x20	; 32
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 9c6:	b3 94       	inc	r11
 9c8:	f7 cf       	rjmp	.-18     	; 0x9b8 <__stack+0x159>
 9ca:	b2 14       	cp	r11, r2
 9cc:	18 f4       	brcc	.+6      	; 0x9d4 <__stack+0x175>
 9ce:	2b 18       	sub	r2, r11
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0x177>
 9d2:	98 2c       	mov	r9, r8
 9d4:	21 2c       	mov	r2, r1
 9d6:	a4 fe       	sbrs	r10, 4
 9d8:	10 c0       	rjmp	.+32     	; 0x9fa <__stack+0x19b>
 9da:	b6 01       	movw	r22, r12
 9dc:	80 e3       	ldi	r24, 0x30	; 48
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 9e4:	a2 fe       	sbrs	r10, 2
 9e6:	17 c0       	rjmp	.+46     	; 0xa16 <__stack+0x1b7>
 9e8:	a1 fc       	sbrc	r10, 1
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <__stack+0x193>
 9ec:	88 e7       	ldi	r24, 0x78	; 120
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <__stack+0x197>
 9f2:	88 e5       	ldi	r24, 0x58	; 88
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	b6 01       	movw	r22, r12
 9f8:	0c c0       	rjmp	.+24     	; 0xa12 <__stack+0x1b3>
 9fa:	8a 2d       	mov	r24, r10
 9fc:	86 78       	andi	r24, 0x86	; 134
 9fe:	59 f0       	breq	.+22     	; 0xa16 <__stack+0x1b7>
 a00:	a1 fe       	sbrs	r10, 1
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <__stack+0x1a9>
 a04:	8b e2       	ldi	r24, 0x2B	; 43
 a06:	01 c0       	rjmp	.+2      	; 0xa0a <__stack+0x1ab>
 a08:	80 e2       	ldi	r24, 0x20	; 32
 a0a:	a7 fc       	sbrc	r10, 7
 a0c:	8d e2       	ldi	r24, 0x2D	; 45
 a0e:	b6 01       	movw	r22, r12
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 a16:	89 14       	cp	r8, r9
 a18:	38 f4       	brcc	.+14     	; 0xa28 <__stack+0x1c9>
 a1a:	b6 01       	movw	r22, r12
 a1c:	80 e3       	ldi	r24, 0x30	; 48
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 a24:	9a 94       	dec	r9
 a26:	f7 cf       	rjmp	.-18     	; 0xa16 <__stack+0x1b7>
 a28:	8a 94       	dec	r8
 a2a:	f3 01       	movw	r30, r6
 a2c:	e8 0d       	add	r30, r8
 a2e:	f1 1d       	adc	r31, r1
 a30:	80 81       	ld	r24, Z
 a32:	b6 01       	movw	r22, r12
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 a3a:	81 10       	cpse	r8, r1
 a3c:	f5 cf       	rjmp	.-22     	; 0xa28 <__stack+0x1c9>
 a3e:	22 20       	and	r2, r2
 a40:	09 f4       	brne	.+2      	; 0xa44 <__stack+0x1e5>
 a42:	42 ce       	rjmp	.-892    	; 0x6c8 <vfprintf+0x24>
 a44:	b6 01       	movw	r22, r12
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 a4e:	2a 94       	dec	r2
 a50:	f6 cf       	rjmp	.-20     	; 0xa3e <__stack+0x1df>
 a52:	f6 01       	movw	r30, r12
 a54:	86 81       	ldd	r24, Z+6	; 0x06
 a56:	97 81       	ldd	r25, Z+7	; 0x07
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <__stack+0x1ff>
 a5a:	8f ef       	ldi	r24, 0xFF	; 255
 a5c:	9f ef       	ldi	r25, 0xFF	; 255
 a5e:	2b 96       	adiw	r28, 0x0b	; 11
 a60:	e2 e1       	ldi	r30, 0x12	; 18
 a62:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__epilogue_restores__>

00000a66 <strnlen_P>:
 a66:	fc 01       	movw	r30, r24
 a68:	05 90       	lpm	r0, Z+
 a6a:	61 50       	subi	r22, 0x01	; 1
 a6c:	70 40       	sbci	r23, 0x00	; 0
 a6e:	01 10       	cpse	r0, r1
 a70:	d8 f7       	brcc	.-10     	; 0xa68 <strnlen_P+0x2>
 a72:	80 95       	com	r24
 a74:	90 95       	com	r25
 a76:	8e 0f       	add	r24, r30
 a78:	9f 1f       	adc	r25, r31
 a7a:	08 95       	ret

00000a7c <strnlen>:
 a7c:	fc 01       	movw	r30, r24
 a7e:	61 50       	subi	r22, 0x01	; 1
 a80:	70 40       	sbci	r23, 0x00	; 0
 a82:	01 90       	ld	r0, Z+
 a84:	01 10       	cpse	r0, r1
 a86:	d8 f7       	brcc	.-10     	; 0xa7e <strnlen+0x2>
 a88:	80 95       	com	r24
 a8a:	90 95       	com	r25
 a8c:	8e 0f       	add	r24, r30
 a8e:	9f 1f       	adc	r25, r31
 a90:	08 95       	ret

00000a92 <fputc>:
 a92:	0f 93       	push	r16
 a94:	1f 93       	push	r17
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	fb 01       	movw	r30, r22
 a9c:	23 81       	ldd	r18, Z+3	; 0x03
 a9e:	21 fd       	sbrc	r18, 1
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <fputc+0x16>
 aa2:	8f ef       	ldi	r24, 0xFF	; 255
 aa4:	9f ef       	ldi	r25, 0xFF	; 255
 aa6:	2c c0       	rjmp	.+88     	; 0xb00 <fputc+0x6e>
 aa8:	22 ff       	sbrs	r18, 2
 aaa:	16 c0       	rjmp	.+44     	; 0xad8 <fputc+0x46>
 aac:	46 81       	ldd	r20, Z+6	; 0x06
 aae:	57 81       	ldd	r21, Z+7	; 0x07
 ab0:	24 81       	ldd	r18, Z+4	; 0x04
 ab2:	35 81       	ldd	r19, Z+5	; 0x05
 ab4:	42 17       	cp	r20, r18
 ab6:	53 07       	cpc	r21, r19
 ab8:	44 f4       	brge	.+16     	; 0xaca <fputc+0x38>
 aba:	a0 81       	ld	r26, Z
 abc:	b1 81       	ldd	r27, Z+1	; 0x01
 abe:	9d 01       	movw	r18, r26
 ac0:	2f 5f       	subi	r18, 0xFF	; 255
 ac2:	3f 4f       	sbci	r19, 0xFF	; 255
 ac4:	31 83       	std	Z+1, r19	; 0x01
 ac6:	20 83       	st	Z, r18
 ac8:	8c 93       	st	X, r24
 aca:	26 81       	ldd	r18, Z+6	; 0x06
 acc:	37 81       	ldd	r19, Z+7	; 0x07
 ace:	2f 5f       	subi	r18, 0xFF	; 255
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	37 83       	std	Z+7, r19	; 0x07
 ad4:	26 83       	std	Z+6, r18	; 0x06
 ad6:	14 c0       	rjmp	.+40     	; 0xb00 <fputc+0x6e>
 ad8:	8b 01       	movw	r16, r22
 ada:	ec 01       	movw	r28, r24
 adc:	fb 01       	movw	r30, r22
 ade:	00 84       	ldd	r0, Z+8	; 0x08
 ae0:	f1 85       	ldd	r31, Z+9	; 0x09
 ae2:	e0 2d       	mov	r30, r0
 ae4:	09 95       	icall
 ae6:	89 2b       	or	r24, r25
 ae8:	e1 f6       	brne	.-72     	; 0xaa2 <fputc+0x10>
 aea:	d8 01       	movw	r26, r16
 aec:	16 96       	adiw	r26, 0x06	; 6
 aee:	8d 91       	ld	r24, X+
 af0:	9c 91       	ld	r25, X
 af2:	17 97       	sbiw	r26, 0x07	; 7
 af4:	01 96       	adiw	r24, 0x01	; 1
 af6:	17 96       	adiw	r26, 0x07	; 7
 af8:	9c 93       	st	X, r25
 afa:	8e 93       	st	-X, r24
 afc:	16 97       	sbiw	r26, 0x06	; 6
 afe:	ce 01       	movw	r24, r28
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	08 95       	ret

00000b0a <__ultoa_invert>:
 b0a:	fa 01       	movw	r30, r20
 b0c:	aa 27       	eor	r26, r26
 b0e:	28 30       	cpi	r18, 0x08	; 8
 b10:	51 f1       	breq	.+84     	; 0xb66 <__ultoa_invert+0x5c>
 b12:	20 31       	cpi	r18, 0x10	; 16
 b14:	81 f1       	breq	.+96     	; 0xb76 <__ultoa_invert+0x6c>
 b16:	e8 94       	clt
 b18:	6f 93       	push	r22
 b1a:	6e 7f       	andi	r22, 0xFE	; 254
 b1c:	6e 5f       	subi	r22, 0xFE	; 254
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	af 4f       	sbci	r26, 0xFF	; 255
 b26:	b1 e0       	ldi	r27, 0x01	; 1
 b28:	3e d0       	rcall	.+124    	; 0xba6 <__ultoa_invert+0x9c>
 b2a:	b4 e0       	ldi	r27, 0x04	; 4
 b2c:	3c d0       	rcall	.+120    	; 0xba6 <__ultoa_invert+0x9c>
 b2e:	67 0f       	add	r22, r23
 b30:	78 1f       	adc	r23, r24
 b32:	89 1f       	adc	r24, r25
 b34:	9a 1f       	adc	r25, r26
 b36:	a1 1d       	adc	r26, r1
 b38:	68 0f       	add	r22, r24
 b3a:	79 1f       	adc	r23, r25
 b3c:	8a 1f       	adc	r24, r26
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	6a 0f       	add	r22, r26
 b44:	71 1d       	adc	r23, r1
 b46:	81 1d       	adc	r24, r1
 b48:	91 1d       	adc	r25, r1
 b4a:	a1 1d       	adc	r26, r1
 b4c:	20 d0       	rcall	.+64     	; 0xb8e <__ultoa_invert+0x84>
 b4e:	09 f4       	brne	.+2      	; 0xb52 <__ultoa_invert+0x48>
 b50:	68 94       	set
 b52:	3f 91       	pop	r19
 b54:	2a e0       	ldi	r18, 0x0A	; 10
 b56:	26 9f       	mul	r18, r22
 b58:	11 24       	eor	r1, r1
 b5a:	30 19       	sub	r19, r0
 b5c:	30 5d       	subi	r19, 0xD0	; 208
 b5e:	31 93       	st	Z+, r19
 b60:	de f6       	brtc	.-74     	; 0xb18 <__ultoa_invert+0xe>
 b62:	cf 01       	movw	r24, r30
 b64:	08 95       	ret
 b66:	46 2f       	mov	r20, r22
 b68:	47 70       	andi	r20, 0x07	; 7
 b6a:	40 5d       	subi	r20, 0xD0	; 208
 b6c:	41 93       	st	Z+, r20
 b6e:	b3 e0       	ldi	r27, 0x03	; 3
 b70:	0f d0       	rcall	.+30     	; 0xb90 <__ultoa_invert+0x86>
 b72:	c9 f7       	brne	.-14     	; 0xb66 <__ultoa_invert+0x5c>
 b74:	f6 cf       	rjmp	.-20     	; 0xb62 <__ultoa_invert+0x58>
 b76:	46 2f       	mov	r20, r22
 b78:	4f 70       	andi	r20, 0x0F	; 15
 b7a:	40 5d       	subi	r20, 0xD0	; 208
 b7c:	4a 33       	cpi	r20, 0x3A	; 58
 b7e:	18 f0       	brcs	.+6      	; 0xb86 <__ultoa_invert+0x7c>
 b80:	49 5d       	subi	r20, 0xD9	; 217
 b82:	31 fd       	sbrc	r19, 1
 b84:	40 52       	subi	r20, 0x20	; 32
 b86:	41 93       	st	Z+, r20
 b88:	02 d0       	rcall	.+4      	; 0xb8e <__ultoa_invert+0x84>
 b8a:	a9 f7       	brne	.-22     	; 0xb76 <__ultoa_invert+0x6c>
 b8c:	ea cf       	rjmp	.-44     	; 0xb62 <__ultoa_invert+0x58>
 b8e:	b4 e0       	ldi	r27, 0x04	; 4
 b90:	a6 95       	lsr	r26
 b92:	97 95       	ror	r25
 b94:	87 95       	ror	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0x86>
 b9e:	00 97       	sbiw	r24, 0x00	; 0
 ba0:	61 05       	cpc	r22, r1
 ba2:	71 05       	cpc	r23, r1
 ba4:	08 95       	ret
 ba6:	9b 01       	movw	r18, r22
 ba8:	ac 01       	movw	r20, r24
 baa:	0a 2e       	mov	r0, r26
 bac:	06 94       	lsr	r0
 bae:	57 95       	ror	r21
 bb0:	47 95       	ror	r20
 bb2:	37 95       	ror	r19
 bb4:	27 95       	ror	r18
 bb6:	ba 95       	dec	r27
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__ultoa_invert+0xa2>
 bba:	62 0f       	add	r22, r18
 bbc:	73 1f       	adc	r23, r19
 bbe:	84 1f       	adc	r24, r20
 bc0:	95 1f       	adc	r25, r21
 bc2:	a0 1d       	adc	r26, r0
 bc4:	08 95       	ret

00000bc6 <__prologue_saves__>:
 bc6:	2f 92       	push	r2
 bc8:	3f 92       	push	r3
 bca:	4f 92       	push	r4
 bcc:	5f 92       	push	r5
 bce:	6f 92       	push	r6
 bd0:	7f 92       	push	r7
 bd2:	8f 92       	push	r8
 bd4:	9f 92       	push	r9
 bd6:	af 92       	push	r10
 bd8:	bf 92       	push	r11
 bda:	cf 92       	push	r12
 bdc:	df 92       	push	r13
 bde:	ef 92       	push	r14
 be0:	ff 92       	push	r15
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
 bee:	ca 1b       	sub	r28, r26
 bf0:	db 0b       	sbc	r29, r27
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	f8 94       	cli
 bf6:	de bf       	out	0x3e, r29	; 62
 bf8:	0f be       	out	0x3f, r0	; 63
 bfa:	cd bf       	out	0x3d, r28	; 61
 bfc:	09 94       	ijmp

00000bfe <__epilogue_restores__>:
 bfe:	2a 88       	ldd	r2, Y+18	; 0x12
 c00:	39 88       	ldd	r3, Y+17	; 0x11
 c02:	48 88       	ldd	r4, Y+16	; 0x10
 c04:	5f 84       	ldd	r5, Y+15	; 0x0f
 c06:	6e 84       	ldd	r6, Y+14	; 0x0e
 c08:	7d 84       	ldd	r7, Y+13	; 0x0d
 c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c10:	b9 84       	ldd	r11, Y+9	; 0x09
 c12:	c8 84       	ldd	r12, Y+8	; 0x08
 c14:	df 80       	ldd	r13, Y+7	; 0x07
 c16:	ee 80       	ldd	r14, Y+6	; 0x06
 c18:	fd 80       	ldd	r15, Y+5	; 0x05
 c1a:	0c 81       	ldd	r16, Y+4	; 0x04
 c1c:	1b 81       	ldd	r17, Y+3	; 0x03
 c1e:	aa 81       	ldd	r26, Y+2	; 0x02
 c20:	b9 81       	ldd	r27, Y+1	; 0x01
 c22:	ce 0f       	add	r28, r30
 c24:	d1 1d       	adc	r29, r1
 c26:	0f b6       	in	r0, 0x3f	; 63
 c28:	f8 94       	cli
 c2a:	de bf       	out	0x3e, r29	; 62
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	cd bf       	out	0x3d, r28	; 61
 c30:	ed 01       	movw	r28, r26
 c32:	08 95       	ret

00000c34 <_exit>:
 c34:	f8 94       	cli

00000c36 <__stop_program>:
 c36:	ff cf       	rjmp	.-2      	; 0xc36 <__stop_program>
