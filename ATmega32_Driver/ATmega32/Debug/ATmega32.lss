
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc1  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ad  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000664  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046a  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003dd  00000000  00000000  000023f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000027cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:
 */ 
#include "lcd.h"


void LCD_KICK(void){
	LCD_CTRL &= ~(1<<Enable_Switch);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_KICK+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_KICK+0x10>
  a2:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |= (1<<Enable_Switch);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_isBusy>:
	}
}

void LCD_isBusy(void){
	//Set the port to receive data on the micro-controller (Data direction as input).
	DataDir_LCD_PORT &= ~(0xff<<DATA_SHIFT);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	1a ba       	out	0x1a, r1	; 26
	
	LCD_CTRL |= (1 << RW_Switch);	//Read mode
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << RS_Switch);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  bc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	DataDir_LCD_PORT  = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_Switch);
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	08 95       	ret

000000cc <LCD_WRITE_COMMAND>:
void LCD_Clear_Screen(void){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}


void LCD_WRITE_COMMAND(unsigned char command){
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
	LCD_isBusy();
  d0:	0e 94 56 00 	call	0xac	; 0xac <LCD_isBusy>
	
	#ifdef EIGHT_BIT_MODE
	LCD_PORT = command;
  d4:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~((1<<RS_Switch) | (1<<RW_Switch));
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	89 7f       	andi	r24, 0xF9	; 249
  da:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0f) | (command << DATA_SHIFT);
	LCD_CTRL &= ~((1<<RS_Switch) | (1<<RW_Switch));
	LCD_KICK();
	
	#endif
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_Clear_Screen>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_Clear_Screen(void){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_WRITE_COMMAND>
  ea:	08 95       	ret

000000ec <LCD_Goto_XY>:
	#endif
}

void LCD_Goto_XY(unsigned char line, unsigned char position){
	
	if (line == 0){
  ec:	81 11       	cpse	r24, r1
  ee:	07 c0       	rjmp	.+14     	; 0xfe <LCD_Goto_XY+0x12>
		if ((position >= 0) && (position < 16)){
  f0:	60 31       	cpi	r22, 0x10	; 16
  f2:	68 f4       	brcc	.+26     	; 0x10e <LCD_Goto_XY+0x22>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	86 0f       	add	r24, r22
  f8:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_WRITE_COMMAND>
  fc:	08 95       	ret
		}
	}else if (line == 1){
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	31 f4       	brne	.+12     	; 0x10e <LCD_Goto_XY+0x22>
		if ((position >= 0) && (position < 16)){
 102:	60 31       	cpi	r22, 0x10	; 16
 104:	20 f4       	brcc	.+8      	; 0x10e <LCD_Goto_XY+0x22>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 106:	80 ec       	ldi	r24, 0xC0	; 192
 108:	86 0f       	add	r24, r22
 10a:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_WRITE_COMMAND>
 10e:	08 95       	ret

00000110 <LCD_INIT>:
 110:	87 e8       	ldi	r24, 0x87	; 135
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_INIT+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_INIT+0xa>
 11a:	00 00       	nop
	LCD_CTRL |= (1<<Enable_Switch);
}

void LCD_INIT(void){
	_delay_ms(20);
	LCD_isBusy();
 11c:	0e 94 56 00 	call	0xac	; 0xac <LCD_isBusy>
	
	DataDir_LCD_CTRL |= ((1<<Enable_Switch) | (1<<RS_Switch) | (1<<RW_Switch));
 120:	87 b3       	in	r24, 0x17	; 23
 122:	8e 60       	ori	r24, 0x0E	; 14
 124:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~((1<<Enable_Switch) | (1<<RS_Switch) | (1<<RW_Switch));
 126:	88 b3       	in	r24, 0x18	; 24
 128:	81 7f       	andi	r24, 0xF1	; 241
 12a:	88 bb       	out	0x18, r24	; 24
	
	DataDir_LCD_PORT = 0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	8a bb       	out	0x1a, r24	; 26
 130:	85 ea       	ldi	r24, 0xA5	; 165
 132:	9e e0       	ldi	r25, 0x0E	; 14
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_INIT+0x24>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_INIT+0x2a>
 13a:	00 00       	nop
	
	_delay_ms(15);
	LCD_Clear_Screen();
 13c:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Clear_Screen>
	
	#ifdef EIGHT_BIT_MODE 
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_WRITE_COMMAND>
 158:	08 95       	ret

0000015a <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~((1<<RS_Switch) | (1<<RW_Switch));
	LCD_KICK();
	
	#endif
}
void LCD_WRITE_CHAR(unsigned char  character){
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
	
	
	#ifdef EIGHT_BIT_MODE
	LCD_isBusy();
 15e:	0e 94 56 00 	call	0xac	; 0xac <LCD_isBusy>
	LCD_CTRL |= (1<<RS_Switch);
 162:	88 b3       	in	r24, 0x18	; 24
 164:	82 60       	ori	r24, 0x02	; 2
 166:	88 bb       	out	0x18, r24	; 24
	LCD_PORT = ((character) << DATA_SHIFT);
 168:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL |= (1<<RS_Switch);
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RW_Switch);
 170:	88 b3       	in	r24, 0x18	; 24
 172:	8b 7f       	andi	r24, 0xFB	; 251
 174:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 176:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0f) | (character << DATA_SHIFT);
	LCD_CTRL |= (1<<RS_Switch);
	LCD_CTRL &= ~(1<<RW_Switch);
	LCD_KICK();
	#endif
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <LCD_WRITE_STRING>:
		}
	}
	
}

void LCD_WRITE_STRING(char * string){
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
	static int count = 0;
	
	while(*string > 0){
 184:	20 c0       	rjmp	.+64     	; 0x1c6 <LCD_WRITE_STRING+0x48>
		LCD_WRITE_CHAR(*string++);
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_WRITE_CHAR>
		++count;
 18c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 190:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 19a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		if (count == 16){
 19e:	80 31       	cpi	r24, 0x10	; 16
 1a0:	91 05       	cpc	r25, r1
 1a2:	29 f4       	brne	.+10     	; 0x1ae <LCD_WRITE_STRING+0x30>
			LCD_Goto_XY(1,0);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 76 00 	call	0xec	; 0xec <LCD_Goto_XY>
 1ac:	0c c0       	rjmp	.+24     	; 0x1c6 <LCD_WRITE_STRING+0x48>
		}else if (count == 32){
 1ae:	80 97       	sbiw	r24, 0x20	; 32
 1b0:	51 f4       	brne	.+20     	; 0x1c6 <LCD_WRITE_STRING+0x48>
			LCD_Clear_Screen();
 1b2:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Clear_Screen>
			LCD_Goto_XY(0,0);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 76 00 	call	0xec	; 0xec <LCD_Goto_XY>
			count = 0;
 1be:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__data_end+0x1>
 1c2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
}

void LCD_WRITE_STRING(char * string){
	static int count = 0;
	
	while(*string > 0){
 1c6:	88 81       	ld	r24, Y
 1c8:	81 11       	cpse	r24, r1
 1ca:	dd cf       	rjmp	.-70     	; 0x186 <LCD_WRITE_STRING+0x8>
			LCD_Clear_Screen();
			LCD_Goto_XY(0,0);
			count = 0;
		}
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <main>:

#include <avr/io.h>
#include "UART.h"
#include "lcd.h"

int main(void){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	e2 97       	sbiw	r28, 0x32	; 50
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
    char x[50];
	LCD_INIT();
 1e6:	0e 94 88 00 	call	0x110	; 0x110 <LCD_INIT>
	UART_Init();
 1ea:	0e 94 04 01 	call	0x208	; 0x208 <UART_Init>
	
	UART_Send_String("Learn-in-depth");
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 10 01 	call	0x220	; 0x220 <UART_Send_String>

	
    while (1) {
		UART_Recive_String(x);
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	0e 94 1d 01 	call	0x23a	; 0x23a <UART_Recive_String>
		LCD_WRITE_STRING(x);
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_WRITE_STRING>
 206:	f7 cf       	rjmp	.-18     	; 0x1f6 <main+0x24>

00000208 <UART_Init>:
	pNum[1] = UART_Recive();
	pNum[2] = UART_Recive();
	pNum[3] = UART_Recive();
	
	return num;	
}
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	89 b9       	out	0x09, r24	; 9
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	8b b9       	out	0x0b, r24	; 11
 212:	8a b1       	in	r24, 0x0a	; 10
 214:	88 60       	ori	r24, 0x08	; 8
 216:	8a b9       	out	0x0a, r24	; 10
 218:	8a b1       	in	r24, 0x0a	; 10
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	8a b9       	out	0x0a, r24	; 10
 21e:	08 95       	ret

00000220 <UART_Send_String>:

void UART_Send_String(char* str){
 220:	fc 01       	movw	r30, r24
	while(*str != '\0'){
 222:	04 c0       	rjmp	.+8      	; 0x22c <UART_Send_String+0xc>
		while(!READ_BIT(UCSRA,UDRE));//Busy wait
 224:	5d 9b       	sbis	0x0b, 5	; 11
 226:	fe cf       	rjmp	.-4      	; 0x224 <UART_Send_String+0x4>
		UDR = *str;
 228:	8c b9       	out	0x0c, r24	; 12
		str++;
 22a:	31 96       	adiw	r30, 0x01	; 1
	
	return num;	
}

void UART_Send_String(char* str){
	while(*str != '\0'){
 22c:	80 81       	ld	r24, Z
 22e:	81 11       	cpse	r24, r1
 230:	f9 cf       	rjmp	.-14     	; 0x224 <UART_Send_String+0x4>
		while(!READ_BIT(UCSRA,UDRE));//Busy wait
		UDR = *str;
		str++;
	}
	while(!READ_BIT(UCSRA,UDRE));//Busy wait
 232:	5d 9b       	sbis	0x0b, 5	; 11
 234:	fe cf       	rjmp	.-4      	; 0x232 <UART_Send_String+0x12>
	UDR = '\0';
 236:	1c b8       	out	0x0c, r1	; 12
 238:	08 95       	ret

0000023a <UART_Recive_String>:
}

void UART_Recive_String(char* str){
 23a:	fc 01       	movw	r30, r24
	while(1){
		
		while(!READ_BIT(UCSRA,RXC));//Busy wait
 23c:	5f 9b       	sbis	0x0b, 7	; 11
 23e:	fe cf       	rjmp	.-4      	; 0x23c <UART_Recive_String+0x2>
		
		*str = UDR;
 240:	9c b1       	in	r25, 0x0c	; 12
 242:	90 83       	st	Z, r25
		
		if (*str == '\0'){
 244:	99 23       	and	r25, r25
 246:	11 f0       	breq	.+4      	; 0x24c <UART_Recive_String+0x12>
			break;
		}else{
			str++;
 248:	31 96       	adiw	r30, 0x01	; 1
}

void UART_Recive_String(char* str){
	while(1){
		
		while(!READ_BIT(UCSRA,RXC));//Busy wait
 24a:	f8 cf       	rjmp	.-16     	; 0x23c <UART_Recive_String+0x2>
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
