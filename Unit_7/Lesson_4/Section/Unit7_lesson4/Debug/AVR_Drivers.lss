
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000240  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0d  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049b  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000281  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000020a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  8a:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:
 *  Author: Ahmed
 */ 
#include "lcd.h"

void LCD_KICK(void){
	LCD_CTRL &= ~(Enable_Switch);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_KICK+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_KICK+0x10>
  a2:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |= (Enable_Switch);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~((RS_Switch) | (RW_Switch));
	LCD_KICK();
	
	#endif
}
void LCD_WRITE_CHAR(unsigned char  character){
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
	LCD_CTRL &= ~(RW_Switch);
	LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0f) | (character & 0xf0);
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	9c 2f       	mov	r25, r28
  b6:	90 7f       	andi	r25, 0xF0	; 240
  b8:	89 2b       	or	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= (RS_Switch);
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(RW_Switch);
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  c8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0f) | (character << DATA_SHIFT);
  cc:	2b b3       	in	r18, 0x1b	; 27
  ce:	30 e1       	ldi	r19, 0x10	; 16
  d0:	c3 9f       	mul	r28, r19
  d2:	c0 01       	movw	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	92 2f       	mov	r25, r18
  d8:	9f 70       	andi	r25, 0x0F	; 15
  da:	89 2b       	or	r24, r25
  dc:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= (RS_Switch);
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(RW_Switch);
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	#endif
}
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_isBusy>:
	}
}

void LCD_isBusy(void){
	//Set the port to receive data on the micro-controller (Data direction as input).
	DataDir_LCD_PORT &= ~(0xff<<DATA_SHIFT);
  f2:	8a b3       	in	r24, 0x1a	; 26
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	8a bb       	out	0x1a, r24	; 26
	
	LCD_CTRL |= (RW_Switch);	//Read mode
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(RS_Switch);
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 104:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	DataDir_LCD_PORT  = 0xff;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(RW_Switch);
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	8b 7f       	andi	r24, 0xFB	; 251
 110:	88 bb       	out	0x18, r24	; 24
 112:	08 95       	ret

00000114 <LCD_WRITE_COMMAND>:
void LCD_Clear_Screen(void){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}


void LCD_WRITE_COMMAND(unsigned char command){
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
	LCD_isBusy();
 118:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_isBusy>
	LCD_CTRL &= ~((RS_Switch) | (RW_Switch));
	LCD_KICK();
	#endif	
	
	#ifdef FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0f) | (command & 0xf0);
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	9c 2f       	mov	r25, r28
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	89 2b       	or	r24, r25
 126:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~((RS_Switch) | (RW_Switch));
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	89 7f       	andi	r24, 0xF9	; 249
 12c:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 12e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
 132:	87 ea       	ldi	r24, 0xA7	; 167
 134:	91 e6       	ldi	r25, 0x61	; 97
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_WRITE_COMMAND+0x22>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_WRITE_COMMAND+0x28>
 13c:	00 00       	nop
	
	_delay_ms(100);
	LCD_PORT = (LCD_PORT & 0x0f) | (command << DATA_SHIFT);
 13e:	2b b3       	in	r18, 0x1b	; 27
 140:	30 e1       	ldi	r19, 0x10	; 16
 142:	c3 9f       	mul	r28, r19
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	92 2f       	mov	r25, r18
 14a:	9f 70       	andi	r25, 0x0F	; 15
 14c:	89 2b       	or	r24, r25
 14e:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~((RS_Switch) | (RW_Switch));
 150:	88 b3       	in	r24, 0x18	; 24
 152:	89 7f       	andi	r24, 0xF9	; 249
 154:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 156:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	#endif
}
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <LCD_Clear_Screen>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_Clear_Screen(void){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_WRITE_COMMAND>
 164:	08 95       	ret

00000166 <LCD_Goto_XY>:
	#endif
}

void LCD_Goto_XY(unsigned char line, unsigned char position){
	
	if (line == 0){
 166:	81 11       	cpse	r24, r1
 168:	07 c0       	rjmp	.+14     	; 0x178 <LCD_Goto_XY+0x12>
		if ((position >= 0) && (position < 16)){
 16a:	60 31       	cpi	r22, 0x10	; 16
 16c:	68 f4       	brcc	.+26     	; 0x188 <LCD_Goto_XY+0x22>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	86 0f       	add	r24, r22
 172:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_WRITE_COMMAND>
 176:	08 95       	ret
		}
	}else if (line == 1){
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	31 f4       	brne	.+12     	; 0x188 <LCD_Goto_XY+0x22>
		if ((position >= 0) && (position < 16)){
 17c:	60 31       	cpi	r22, 0x10	; 16
 17e:	20 f4       	brcc	.+8      	; 0x188 <LCD_Goto_XY+0x22>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 180:	80 ec       	ldi	r24, 0xC0	; 192
 182:	86 0f       	add	r24, r22
 184:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_WRITE_COMMAND>
 188:	08 95       	ret

0000018a <LCD_WRITE_STRING>:
		}
	}
	
}

void LCD_WRITE_STRING(char * string){
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
	static int count = 0;
	
	while(*string > 0){
 190:	20 c0       	rjmp	.+64     	; 0x1d2 <LCD_WRITE_STRING+0x48>
		LCD_WRITE_CHAR(*string++);
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_CHAR>
		++count;
 198:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 19c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 1a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		if (count == 16){
 1aa:	80 31       	cpi	r24, 0x10	; 16
 1ac:	91 05       	cpc	r25, r1
 1ae:	29 f4       	brne	.+10     	; 0x1ba <LCD_WRITE_STRING+0x30>
			LCD_Goto_XY(1,0);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Goto_XY>
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <LCD_WRITE_STRING+0x48>
		}else if (count == 32){
 1ba:	80 97       	sbiw	r24, 0x20	; 32
 1bc:	51 f4       	brne	.+20     	; 0x1d2 <LCD_WRITE_STRING+0x48>
			LCD_Clear_Screen();
 1be:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear_Screen>
			LCD_Goto_XY(0,0);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Goto_XY>
			count = 0;
 1ca:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__data_end+0x1>
 1ce:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
}

void LCD_WRITE_STRING(char * string){
	static int count = 0;
	
	while(*string > 0){
 1d2:	88 81       	ld	r24, Y
 1d4:	81 11       	cpse	r24, r1
 1d6:	dd cf       	rjmp	.-70     	; 0x192 <LCD_WRITE_STRING+0x8>
			LCD_Clear_Screen();
			LCD_Goto_XY(0,0);
			count = 0;
		}
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <LCD_INIT>:
 1de:	87 e8       	ldi	r24, 0x87	; 135
 1e0:	93 e1       	ldi	r25, 0x13	; 19
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_INIT+0x4>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_INIT+0xa>
 1e8:	00 00       	nop
	LCD_CTRL |= (Enable_Switch);
}

void LCD_INIT(void){
	_delay_ms(20);
	LCD_isBusy();
 1ea:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_isBusy>
	
	DataDir_LCD_CTRL |= ((Enable_Switch) | (RS_Switch) | (RW_Switch));
 1ee:	87 b3       	in	r24, 0x17	; 23
 1f0:	8e 60       	ori	r24, 0x0E	; 14
 1f2:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~((Enable_Switch) | (RS_Switch) | (RW_Switch));
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	81 7f       	andi	r24, 0xF1	; 241
 1f8:	88 bb       	out	0x18, r24	; 24
	

	DataDir_LCD_PORT = 0xff;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	8a bb       	out	0x1a, r24	; 26
 1fe:	85 ea       	ldi	r24, 0xA5	; 165
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_INIT+0x24>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_INIT+0x2a>
 208:	00 00       	nop
	
	_delay_ms(15);
	LCD_Clear_Screen();
 20a:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear_Screen>
	#endif
	
	
	#ifdef FOUR_BIT_MODE
	
	LCD_WRITE_COMMAND(0x02);
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_WRITE_COMMAND>
	#endif
	
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 226:	8f e0       	ldi	r24, 0x0F	; 15
 228:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_WRITE_COMMAND>
 22c:	08 95       	ret

0000022e <main>:
{
    /* Replace with your application code */



	LCD_INIT();
 22e:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_INIT>
	
	LCD_WRITE_STRING("Learn in depth");
 232:	80 e6       	ldi	r24, 0x60	; 96
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WRITE_STRING>
 23a:	ff cf       	rjmp	.-2      	; 0x23a <main+0xc>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
