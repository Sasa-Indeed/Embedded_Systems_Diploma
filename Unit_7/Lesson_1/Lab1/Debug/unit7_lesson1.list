
unit7_lesson1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000374  0800037c  0001037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000374  08000374  0001037c  2**0
                  CONTENTS
  4 .ARM          00000000  08000374  08000374  0001037c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000374  0800037c  0001037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800037c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800037c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001037c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000011b  00000000  00000000  000103a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b6  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000060  00000000  00000000  00010578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  000105d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f38  00000000  00000000  00010620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000057e  00000000  00000000  00011558  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003cb4  00000000  00000000  00011ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001578a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00015808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800035c 	.word	0x0800035c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800035c 	.word	0x0800035c

08000170 <main>:
//APIs
void clock_init(void);
void GPIO_init(void);
void delay(uint32_t time);

int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	//Initialising Peripherals
	clock_init();
 8000174:	f000 f82a 	bl	80001cc <clock_init>
	GPIO_init();
 8000178:	f000 f83c 	bl	80001f4 <GPIO_init>


	while(1){
		if(((GPIOA_IDR & (1<<1))>>1) == 0){
 800017c:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <main+0x54>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	f003 0302 	and.w	r3, r3, #2
 8000184:	2b00      	cmp	r3, #0
 8000186:	d10c      	bne.n	80001a2 <main+0x32>
			GPIOB_ODR ^= (1<<1);
 8000188:	4b0f      	ldr	r3, [pc, #60]	; (80001c8 <main+0x58>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a0e      	ldr	r2, [pc, #56]	; (80001c8 <main+0x58>)
 800018e:	f083 0302 	eor.w	r3, r3, #2
 8000192:	6013      	str	r3, [r2, #0]
			while(((GPIOA_IDR & (1<<1))>>1) == 0);
 8000194:	bf00      	nop
 8000196:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <main+0x54>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	f003 0302 	and.w	r3, r3, #2
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d0f9      	beq.n	8000196 <main+0x26>
		}

		if(((GPIOA_IDR & (1<<13))>>13) == 1){
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <main+0x54>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	0b5b      	lsrs	r3, r3, #13
 80001a8:	f003 0301 	and.w	r3, r3, #1
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d105      	bne.n	80001bc <main+0x4c>
			GPIOB_ODR ^= (1<<13);
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <main+0x58>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <main+0x58>)
 80001b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001ba:	6013      	str	r3, [r2, #0]

		}

		delay(2);
 80001bc:	2002      	movs	r0, #2
 80001be:	f000 f863 	bl	8000288 <delay>
		if(((GPIOA_IDR & (1<<1))>>1) == 0){
 80001c2:	e7db      	b.n	800017c <main+0xc>
 80001c4:	40010808 	.word	0x40010808
 80001c8:	40010c0c 	.word	0x40010c0c

080001cc <clock_init>:
	}
}


void clock_init(void){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	//Enable GPIO A clock
	RCC_APB2ENR |= (1 << 2);
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <clock_init+0x24>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a06      	ldr	r2, [pc, #24]	; (80001f0 <clock_init+0x24>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6013      	str	r3, [r2, #0]

	//Enable GPIO B clock
	RCC_APB2ENR |= (1 << 3);
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <clock_init+0x24>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <clock_init+0x24>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6013      	str	r3, [r2, #0]
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40021018 	.word	0x40021018

080001f4 <GPIO_init>:

void GPIO_init(void){
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0

	GPIOA_CRL = 0;
 80001f8:	4b1f      	ldr	r3, [pc, #124]	; (8000278 <GPIO_init+0x84>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
	GPIOA_CRH = 0;
 80001fe:	4b1f      	ldr	r3, [pc, #124]	; (800027c <GPIO_init+0x88>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	//Enabling port A1 as input floating
	GPIOA_CRL &= ~(0b11<<4);	//mode1 == 00
 8000204:	4b1c      	ldr	r3, [pc, #112]	; (8000278 <GPIO_init+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1b      	ldr	r2, [pc, #108]	; (8000278 <GPIO_init+0x84>)
 800020a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800020e:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (0b01<<6);		//CNF1 == 01 for floating
 8000210:	4b19      	ldr	r3, [pc, #100]	; (8000278 <GPIO_init+0x84>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a18      	ldr	r2, [pc, #96]	; (8000278 <GPIO_init+0x84>)
 8000216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800021a:	6013      	str	r3, [r2, #0]

	//Enabling port A13 as input floating
	GPIOA_CRH &= ~(0b11<<20);	//mode13 == 00
 800021c:	4b17      	ldr	r3, [pc, #92]	; (800027c <GPIO_init+0x88>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a16      	ldr	r2, [pc, #88]	; (800027c <GPIO_init+0x88>)
 8000222:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000226:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= (0b01<<22);	//CNF13 == 01 for floating
 8000228:	4b14      	ldr	r3, [pc, #80]	; (800027c <GPIO_init+0x88>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a13      	ldr	r2, [pc, #76]	; (800027c <GPIO_init+0x88>)
 800022e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000232:	6013      	str	r3, [r2, #0]

	GPIOB_CRL = 0;
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <GPIO_init+0x8c>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
	GPIOB_CRH = 0;
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <GPIO_init+0x90>)
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]

	//Enabling port B1 as input floating
	GPIOB_CRL |= (0b01<<4);		//mode1 == 01 for Output mode, max speed 10 MHz
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <GPIO_init+0x8c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <GPIO_init+0x8c>)
 8000246:	f043 0310 	orr.w	r3, r3, #16
 800024a:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &= ~(0b11<<6);	//CNF1 == 00: General purpose output push-pull
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <GPIO_init+0x8c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <GPIO_init+0x8c>)
 8000252:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000256:	6013      	str	r3, [r2, #0]

	//Enabling port B13 as input floating
	GPIOB_CRH |= (0b01<<20);	//mode1 == 01 for Output mode, max speed 10 MHz
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <GPIO_init+0x90>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a09      	ldr	r2, [pc, #36]	; (8000284 <GPIO_init+0x90>)
 800025e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(0b11<<22);	//CNF13 == 00: General purpose output push-pull
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <GPIO_init+0x90>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a06      	ldr	r2, [pc, #24]	; (8000284 <GPIO_init+0x90>)
 800026a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800026e:	6013      	str	r3, [r2, #0]

}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40010800 	.word	0x40010800
 800027c:	40010804 	.word	0x40010804
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40010c04 	.word	0x40010c04

08000288 <delay>:

void delay(uint32_t time){
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i = 0; i <  time; i++){
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	e00b      	b.n	80002ae <delay+0x26>
		for(j = 0; j <  255; j++);
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	e002      	b.n	80002a2 <delay+0x1a>
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	3301      	adds	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	2bfe      	cmp	r3, #254	; 0xfe
 80002a6:	d9f9      	bls.n	800029c <delay+0x14>
	for(i = 0; i <  time; i++){
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3301      	adds	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d3ef      	bcc.n	8000296 <delay+0xe>
	}
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	; (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <LoopForever+0x16>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ee:	f000 f811 	bl	8000314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f2:	f7ff ff3d 	bl	8000170 <main>

080002f6 <LoopForever>:

LoopForever:
    b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	0800037c 	.word	0x0800037c
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	2000001c 	.word	0x2000001c

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>
	...

08000314 <__libc_init_array>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	2500      	movs	r5, #0
 8000318:	4e0c      	ldr	r6, [pc, #48]	; (800034c <__libc_init_array+0x38>)
 800031a:	4c0d      	ldr	r4, [pc, #52]	; (8000350 <__libc_init_array+0x3c>)
 800031c:	1ba4      	subs	r4, r4, r6
 800031e:	10a4      	asrs	r4, r4, #2
 8000320:	42a5      	cmp	r5, r4
 8000322:	d109      	bne.n	8000338 <__libc_init_array+0x24>
 8000324:	f000 f81a 	bl	800035c <_init>
 8000328:	2500      	movs	r5, #0
 800032a:	4e0a      	ldr	r6, [pc, #40]	; (8000354 <__libc_init_array+0x40>)
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <__libc_init_array+0x44>)
 800032e:	1ba4      	subs	r4, r4, r6
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	42a5      	cmp	r5, r4
 8000334:	d105      	bne.n	8000342 <__libc_init_array+0x2e>
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800033c:	4798      	blx	r3
 800033e:	3501      	adds	r5, #1
 8000340:	e7ee      	b.n	8000320 <__libc_init_array+0xc>
 8000342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000346:	4798      	blx	r3
 8000348:	3501      	adds	r5, #1
 800034a:	e7f2      	b.n	8000332 <__libc_init_array+0x1e>
 800034c:	08000374 	.word	0x08000374
 8000350:	08000374 	.word	0x08000374
 8000354:	08000374 	.word	0x08000374
 8000358:	08000378 	.word	0x08000378

0800035c <_init>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr

08000368 <_fini>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr
